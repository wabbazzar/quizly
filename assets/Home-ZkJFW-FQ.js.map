{"version":3,"file":"Home-ZkJFW-FQ.js","sources":["../../src/components/EnhancedDeckCard.tsx","../../src/pages/Home.tsx"],"sourcesContent":["import { FC, memo, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { motion } from 'framer-motion';\nimport { Deck } from '@/types';\nimport { useNotificationStore } from '@/store/notificationStore';\nimport {\n  FlashcardsIcon,\n  LearnIcon,\n  MatchIcon,\n  ReadIcon,\n  CardsIcon,\n  LevelsIcon,\n  ClockIcon,\n} from '@/components/icons/ModeIcons';\nimport styles from './EnhancedDeckCard.module.css';\n\ninterface ModeConfig {\n  id: 'flashcards' | 'learn' | 'match' | 'read';\n  label: string;\n  icon: FC<{ className?: string }>;\n  color: string;\n  description: string;\n  route: string;\n}\n\ninterface DeckProgress {\n  overall: number;\n  byMode: Record<string, number>;\n  lastStudied?: Date;\n  totalCardsStudied: number;\n  streakDays: number;\n  masteredCards: number;\n  totalCards: number;\n}\n\ninterface EnhancedDeckCardProps {\n  deck: Deck;\n  progress?: DeckProgress;\n  onModeSelect?: (deckId: string, mode: string) => void;\n}\n\nconst formatLastStudied = (date?: Date): string => {\n  if (!date) return 'Never';\n\n  const now = new Date();\n  const diff = now.getTime() - date.getTime();\n  const days = Math.floor(diff / (1000 * 60 * 60 * 24));\n\n  if (days === 0) return 'Today';\n  if (days === 1) return 'Yesterday';\n  if (days < 7) return `${days} days ago`;\n  if (days < 30) return `${Math.floor(days / 7)} weeks ago`;\n  return `${Math.floor(days / 30)} months ago`;\n};\n\nconst CircularProgress: FC<{ value: number }> = ({ value }) => {\n  const radius = 16;\n  const circumference = 2 * Math.PI * radius;\n  const offset = circumference - (value / 100) * circumference;\n\n  return (\n    <svg viewBox=\"0 0 40 40\" className={styles.progressSvg}>\n      <circle\n        cx=\"20\"\n        cy=\"20\"\n        r={radius}\n        className={styles.progressBackground}\n        strokeWidth=\"2.5\"\n        fill=\"none\"\n      />\n      <circle\n        cx=\"20\"\n        cy=\"20\"\n        r={radius}\n        className={styles.progressFill}\n        strokeWidth=\"2.5\"\n        fill=\"none\"\n        strokeDasharray={circumference}\n        strokeDashoffset={offset}\n        strokeLinecap=\"round\"\n      />\n      <text x=\"20\" y=\"20\" className={styles.progressText} textAnchor=\"middle\" dy=\"0.3em\">\n        {Math.round(value)}%\n      </text>\n    </svg>\n  );\n};\n\nconst DifficultyBadge: FC<{ level?: string }> = ({ level }) => {\n  if (!level) return null;\n\n  return (\n    <span className={`${styles.difficultyBadge} ${styles[level.replace('_', '-')]}`}>\n      {level.replace('_', ' ')}\n    </span>\n  );\n};\n\nexport const EnhancedDeckCard: FC<EnhancedDeckCardProps> = memo(\n  ({\n    deck,\n    progress = {\n      overall: 0,\n      byMode: {},\n      totalCardsStudied: 0,\n      streakDays: 0,\n      masteredCards: 0,\n      totalCards: deck.content.length,\n    },\n    onModeSelect,\n  }) => {\n    const [isHovered, setIsHovered] = useState(false);\n    const navigate = useNavigate();\n    const { showNotification } = useNotificationStore();\n    const { metadata } = deck;\n\n    const modes: ModeConfig[] = [\n      {\n        id: 'flashcards',\n        label: 'Flashcards',\n        icon: FlashcardsIcon,\n        color: 'primary',\n        description: 'Classic flip cards',\n        route: `/flashcards/${deck.id}`,\n      },\n      {\n        id: 'learn',\n        label: 'Learn',\n        icon: LearnIcon,\n        color: 'secondary',\n        description: 'Interactive questions',\n        route: `/learn/${deck.id}`,\n      },\n      {\n        id: 'match',\n        label: 'Match',\n        icon: MatchIcon,\n        color: 'purple',\n        description: 'Memory game',\n        route: `/match/${deck.id}`,\n      },\n      {\n        id: 'read',\n        label: 'Read',\n        icon: ReadIcon,\n        color: 'orange',\n        description: 'Structured reading practice',\n        route: `/read/${deck.id}`,\n      },\n    ];\n\n    const handleModeClick = (e: React.MouseEvent, mode: ModeConfig) => {\n      e.stopPropagation();\n\n      // Check if Read mode is available for this deck\n      if (mode.id === 'read' && (!deck.reading || Object.keys(deck.reading.dialogues).length === 0)) {\n        showNotification({\n          message: 'No reading content available for this deck',\n          type: 'info',\n          icon: 'ðŸ“–',\n          duration: 3000,\n        });\n        return;\n      }\n\n      onModeSelect?.(deck.id, mode.id);\n      navigate(mode.route);\n    };\n\n    const handleCardClick = () => {\n      navigate(`/deck/${deck.id}`);\n    };\n\n    return (\n      <motion.article\n        className={styles.enhancedDeckCard}\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        whileHover={{ y: -4 }}\n        onHoverStart={() => setIsHovered(true)}\n        onHoverEnd={() => setIsHovered(false)}\n        onClick={handleCardClick}\n        layout\n      >\n        {/* Progress Ring - Shows mastery percentage of entire deck */}\n        {progress.overall > 0 && (\n          <div className={styles.progressRing}>\n            <CircularProgress value={progress.overall} />\n          </div>\n        )}\n\n        {/* Deck Info */}\n        <header className={styles.cardHeader}>\n          <h3 className={styles.deckName}>{metadata.deck_name}</h3>\n          <DifficultyBadge level={metadata.difficulty} />\n        </header>\n\n        {metadata.deck_subtitle && <p className={styles.subtitle}>{metadata.deck_subtitle}</p>}\n\n        {metadata.description && <p className={styles.description}>{metadata.description}</p>}\n\n        <div className={styles.stats}>\n          <div className={styles.statItem}>\n            <CardsIcon className={styles.statIcon} size={16} />\n            <span className={styles.statValue}>\n              {progress.masteredCards > 0\n                ? `${progress.masteredCards}/${metadata.card_count || deck.content.length}`\n                : metadata.card_count || deck.content.length}\n            </span>\n            <span className={styles.statLabel}>\n              {progress.masteredCards > 0 ? 'mastered' : 'cards'}\n            </span>\n          </div>\n\n          {metadata.available_levels && metadata.available_levels.length > 0 && (\n            <div className={styles.statItem}>\n              <LevelsIcon className={styles.statIcon} size={16} />\n              <span className={styles.statValue}>{metadata.available_levels.length}</span>\n              <span className={styles.statLabel}>levels</span>\n            </div>\n          )}\n\n          <div className={styles.statItem}>\n            <ClockIcon className={styles.statIcon} size={16} />\n            <span className={styles.statValue}>{formatLastStudied(progress.lastStudied)}</span>\n          </div>\n        </div>\n\n        {/* Tags */}\n        {metadata.tags && metadata.tags.length > 0 && (\n          <div className={styles.tags}>\n            {metadata.tags.slice(0, 3).map(tag => (\n              <span key={tag} className={styles.tag}>\n                {tag}\n              </span>\n            ))}\n            {metadata.tags.length > 3 && (\n              <span className={styles.tag}>+{metadata.tags.length - 3}</span>\n            )}\n          </div>\n        )}\n\n        {/* Mode Selection Strip */}\n        <motion.div\n          className={styles.modeStrip}\n          initial={false}\n          animate={{ opacity: isHovered ? 1 : 0.8 }}\n        >\n          {modes.map(mode => (\n            <motion.button\n              key={mode.id}\n              className={`${styles.modeButton} ${styles[mode.id]}`}\n              onClick={e => handleModeClick(e, mode)}\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n              aria-label={`Study ${metadata.deck_name} with ${mode.label} mode`}\n              title={mode.description}\n            >\n              <mode.icon className={styles.modeIcon} />\n              <span className={styles.modeLabel}>{mode.label}</span>\n            </motion.button>\n          ))}\n        </motion.div>\n      </motion.article>\n    );\n  }\n);\n\nEnhancedDeckCard.displayName = 'EnhancedDeckCard';\n\nexport default EnhancedDeckCard;\n","import { FC, useEffect, useCallback, useRef } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useDeckStore } from '@/store/deckStore';\nimport { useProgressStore } from '@/store/progressStore';\nimport EnhancedDeckCard from '@/components/EnhancedDeckCard';\nimport styles from './Home.module.css';\n\nconst Home: FC = () => {\n  const { decks, isLoading, error, loadDecks, selectDeck } = useDeckStore();\n  const { getDeckProgress } = useProgressStore();\n  const headerRef = useRef<HTMLElement | null>(null);\n\n  useEffect(() => {\n    const node = headerRef.current;\n    if (!node) return;\n    const img = node.querySelector('img.' + styles.mascot) as HTMLImageElement | null;\n    if (!img) return;\n\n    const updateGradientStart = () => {\n      try {\n        const rect = img.getBoundingClientRect();\n        const headerRect = node.getBoundingClientRect();\n        const start = Math.max(0, rect.right - headerRect.left + 8);\n        node.style.setProperty('--grad-start', `${Math.round(start)}px`);\n        node.style.setProperty('--left-color', '#5b82b0');\n        node.style.setProperty(\n          '--right-color',\n          getComputedStyle(document.documentElement).getPropertyValue('--primary-main') || '#5b82b0'\n        );\n      } catch {}\n    };\n\n    updateGradientStart();\n    const onResize = () => updateGradientStart();\n    window.addEventListener('resize', onResize);\n\n    const setHeaderStartFromImage = () => {\n      try {\n        const canvas = document.createElement('canvas');\n        canvas.width = 1;\n        canvas.height = 1;\n        const ctx = canvas.getContext('2d');\n        if (!ctx) return;\n        ctx.drawImage(img, 0, 0, 1, 1);\n        const data = ctx.getImageData(0, 0, 1, 1).data;\n        const toHex = (v: number) => v.toString(16).padStart(2, '0');\n        const hex = `#${toHex(data[0])}${toHex(data[1])}${toHex(data[2])}`;\n        node.style.setProperty('--header-start', hex);\n        updateGradientStart();\n      } catch {}\n    };\n\n    if (img.complete) {\n      setHeaderStartFromImage();\n    } else {\n      img.addEventListener('load', setHeaderStartFromImage, { once: true });\n    }\n\n    return () => {\n      window.removeEventListener('resize', onResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    loadDecks();\n  }, [loadDecks]);\n\n  const handleModeSelect = useCallback(\n    (deckId: string, _mode: string) => {\n      selectDeck(deckId);\n      // Mode navigation is handled by EnhancedDeckCard\n    },\n    [selectDeck]\n  );\n\n  if (isLoading) {\n    return null; // Let PageLazyBoundary handle loading state\n  }\n\n  if (error) {\n    return (\n      <div className={styles.errorContainer}>\n        <h2>Error Loading Decks</h2>\n        <p>{error}</p>\n        <button onClick={loadDecks} className={styles.retryButton}>\n          Retry\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      {/* Hero Section */}\n      <header\n        className={styles.header}\n        ref={headerRef}\n      >\n            <div className={styles.iosSafeTop} aria-hidden=\"true\" />\n            <img\n              src={`${import.meta.env.BASE_URL}icons/mrquizly.png`}\n              alt=\"Mr. Quizly\"\n              className={styles.mascot}\n              decoding=\"async\"\n              loading=\"eager\"\n            />\n            <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ duration: 0.3 }}\n        >\n              <h1 className={styles.title}>Quizly</h1>\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                viewBox=\"0 0 1600 220\"\n                role=\"img\"\n                aria-labelledby=\"quizlyCursiveHeaderTitle\"\n                style={{\n                  width: '100%',\n                  height: 'auto',\n                  maxHeight: 120,\n                  transform: 'rotate(-6deg) skewX(-6deg)',\n                  transformOrigin: 'center center',\n                  marginTop: 8\n                }}\n                className={styles.taglineSvg}\n              >\n                <title id=\"quizlyCursiveHeaderTitle\">it's not a test! â€” cursive header</title>\n                <style>{`\n                  :root{\n                    --quizly-blue:#4A90E2;\n                    --quizly-white:#FFFFFF;\n                  }\n                  text {\n                    font-family: \"Pacifico\", \"Lobster\", \"Brush Script MT\", \"Segoe Script\",\n                                 \"Snell Roundhand\", \"Dancing Script\", cursive;\n                    font-size: 94px;\n                    font-weight: 700;\n                    fill: var(--quizly-white);\n                    letter-spacing: 3px;\n                    paint-order: stroke fill;\n                    stroke: var(--quizly-white);\n                    stroke-width: 1px;\n                    dominant-baseline: middle;\n                    text-anchor: middle;\n                  }\n                  .tg-center { display: block; }\n                  .tg-right { display: none; text-anchor: end; }\n                  @media (max-width: 768px) {\n                    .tg-center { display: none; }\n                    .tg-right { display: block; }\n                    text { font-size: 172px; stroke-width: 1.6px; }\n                  }\n                `}</style>\n                <text className=\"tg-center\" x=\"50%\" y=\"120\">it's not a test!</text>\n                <text className=\"tg-right\" x=\"100%\" y=\"120\">it's not a test!</text>\n              </svg>\n        </motion.div>\n      </header>\n\n      <main className={styles.main}>\n        <section className={styles.deckSection}>\n          <h2 className={styles.sectionTitle}>Available Decks</h2>\n\n          {decks.length === 0 ? (\n            <motion.div\n              className={styles.emptyState}\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ duration: 0.5 }}\n            >\n              <p>No decks available</p>\n              <p className={styles.emptyHint}>Import a deck to get started</p>\n            </motion.div>\n          ) : (\n            <motion.div\n              className={styles.deckGrid}\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ duration: 0.3 }}\n            >\n              <AnimatePresence mode=\"popLayout\">\n                {decks.map(deck => (\n                  <motion.div\n                    key={deck.id}\n                    layout\n                    initial={{ opacity: 0, scale: 0.95 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    exit={{ opacity: 0, scale: 0.95 }}\n                    transition={{ duration: 0.2 }}\n                  >\n                    <EnhancedDeckCard\n                      deck={deck}\n                      progress={getDeckProgress(deck.id)}\n                      onModeSelect={handleModeSelect}\n                    />\n                  </motion.div>\n                ))}\n              </AnimatePresence>\n            </motion.div>\n          )}\n        </section>\n      </main>\n    </div>\n  );\n};\n\nexport default Home;\n"],"names":["formatLastStudied","date","diff","Date","getTime","days","Math","floor","CircularProgress","value","circumference","PI","offset","viewBox","className","styles","progressSvg","children","jsx","cx","cy","r","progressBackground","strokeWidth","fill","progressFill","strokeDasharray","strokeDashoffset","strokeLinecap","jsxs","x","y","progressText","textAnchor","dy","round","DifficultyBadge","level","difficultyBadge","replace","EnhancedDeckCard","memo","deck","progress","overall","byMode","totalCardsStudied","streakDays","masteredCards","totalCards","content","length","onModeSelect","isHovered","setIsHovered","useState","navigate","useNavigate","showNotification","useNotificationStore","metadata","modes","id","label","icon","FlashcardsIcon","color","description","route","LearnIcon","MatchIcon","ReadIcon","motion","article","enhancedDeckCard","initial","opacity","animate","whileHover","onHoverStart","onHoverEnd","onClick","layout","progressRing","cardHeader","deckName","deck_name","difficulty","deck_subtitle","subtitle","stats","statItem","CardsIcon","statIcon","size","statValue","card_count","statLabel","available_levels","LevelsIcon","ClockIcon","lastStudied","tags","slice","map","tag","div","modeStrip","mode","button","modeButton","e","stopPropagation","reading","Object","keys","dialogues","message","type","duration","handleModeClick","scale","whileTap","title","modeIcon","modeLabel","displayName","Home","decks","isLoading","error","loadDecks","selectDeck","useDeckStore","getDeckProgress","useProgressStore","headerRef","useRef","useEffect","node","current","img","querySelector","updateGradientStart","rect","getBoundingClientRect","headerRect","start","max","right","left","style","setProperty","getComputedStyle","document","documentElement","getPropertyValue","onResize","window","addEventListener","setHeaderStartFromImage","canvas","createElement","width","height","ctx","getContext","drawImage","data","getImageData","toHex","v","toString","padStart","hex","complete","once","removeEventListener","handleModeSelect","useCallback","deckId","_mode","ref","src","alt","decoding","loading","transition","xmlns","role","maxHeight","transform","transformOrigin","marginTop","AnimatePresence","exit"],"mappings":"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"}