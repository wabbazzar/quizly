import{c as e,u as s,d as t,b as r,r as n,j as a}from"./index-K5uqA-3n.js";import{u as o}from"./progressStore-DPupY7fl.js";import{u as i}from"./cardMasteryStore-z-5vmz49.js";import{s as d,L as c}from"./Learn.module-B1mVkgjh.js";import{u as l,U as u}from"./UnifiedSettings-HzgFl0jR.js";import"./SharedModeHeader-DRg3hh5Z.js";import"./SettingsIcon-BSlFCqwD.js";const g={questionTypes:["multiple_choice","free_text"],adaptiveDifficulty:!0,cardsPerRound:10,masteryThreshold:3,schedulingAlgorithm:"smart_spaced",aggressiveness:"balanced",minSpacing:2,maxSpacing:8,clusterLimit:2,progressRatio:.3,difficultyWeight:.5,questionSides:["side_a"],answerSides:["side_b"],frontSides:["side_a"],backSides:["side_b"],enableTimer:!1,enableAudio:!1,randomize:!0,progressionMode:"sequential",questionTypeMix:"auto",timerSeconds:30,progressiveLearning:"spaced",progressiveLearningSpacing:3},m=()=>{const{deckId:m}=e(),p=s(),f=t(),{currentDeck:S,loadDeck:h,isLoading:k,error:j,shuffleMasteredCardsBack:C}=r(),{updateDeckProgress:b}=o(),{updateCardAttempt:x,getMasteredCards:y}=i(),{updateSettings:L}=l(),v=f.state?.excludeCards,D=f.state?.strugglingCards,M=m?y(m):[],[_,E]=n.useState(()=>{const e=localStorage.getItem("learnModeSettings");if(e)try{return{...g,...JSON.parse(e)}}catch(s){}return g}),[I,N]=n.useState(!1);n.useEffect(()=>{localStorage.setItem("learnModeSettings",JSON.stringify(_))},[_]),n.useEffect(()=>{m&&h(m)},[m,h]),n.useEffect(()=>(document.body.classList.add("no-scroll"),()=>{document.body.classList.remove("no-scroll")}),[]);if(k)return null;if(j||!S)return a.jsxs("div",{className:d.errorContainer,children:[a.jsx("h2",{children:"Unable to Load Deck"}),a.jsx("p",{children:j||"Deck not found"}),a.jsx("button",{onClick:()=>p(`/deck/${m}`),className:d.backButton,children:"Back to Deck"})]});if(!S.content||0===S.content.length)return null;let T=v||[];!C&&M.length>0&&(T=[...new Set([...T,...M])]);const q=T.length>0?{...S,content:S.content.filter((e,s)=>!T.includes(s))}:S;return a.jsxs("div",{className:d.learnPage,children:[a.jsx(c,{deck:q,settings:_,strugglingCardIndices:D,onComplete:e=>{if(m&&S){const s=S.content.length,t=e.correctAnswers,r=_.masteryThreshold||3;e.passedCards&&e.passedCards.forEach(e=>{x(m,e,!0,s,r)}),e.strugglingCards&&e.strugglingCards.forEach(e=>{x(m,e,!1,s,r)}),b(m,"learn",e.totalQuestions,t,e.totalQuestions)}p(`/deck/${m}/results`,{state:{results:e}})},onExit:()=>{p(`/deck/${m}`)},onOpenSettings:()=>N(!0),deckId:m,allDeckCards:S.content}),a.jsx(u,{visible:I,onClose:()=>N(!1),deck:S,mode:"learn",settings:_,onUpdateSettings:e=>{const s=e;E(s),m&&L(m,"learn",s)}})]})};export{m as default};
