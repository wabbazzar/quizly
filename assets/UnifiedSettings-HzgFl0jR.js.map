{"version":3,"file":"UnifiedSettings-HzgFl0jR.js","sources":["../../src/components/icons/StatusIcons.tsx","../../src/store/settingsStore.ts","../../src/constants/presets.ts","../../src/hooks/useUnifiedSettings.ts","../../src/components/modals/settings/QuickPresets.tsx","../../src/components/modals/settings/SideConfiguration.tsx","../../src/components/modals/settings/ProgressionSettings.tsx","../../src/components/modals/settings/LearningSettings.tsx","../../src/components/modals/settings/MasterySettings.tsx","../../src/components/modals/settings/DeckInformation.tsx","../../src/components/modals/settings/MatchSettings.tsx","../../src/components/modals/settings/ReadSettings.tsx","../../src/components/modals/UnifiedSettings.tsx"],"sourcesContent":["import { FC } from 'react';\n\ninterface IconProps {\n  className?: string;\n  size?: number;\n  color?: string;\n}\n\nexport const TrophyIcon: FC<IconProps> = ({ className, size = 24, color = 'currentColor' }) => (\n  <svg\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    className={className}\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M6.5 9.5V6C6.5 5.44772 6.94772 5 7.5 5H16.5C17.0523 5 17.5 5.44772 17.5 6V9.5M6.5 9.5C6.5 11.433 8.067 13 10 13H10.5M6.5 9.5H3.5C3.5 11.433 5.067 13 7 13H8M17.5 9.5C17.5 11.433 15.933 13 14 13H13.5M17.5 9.5H20.5C20.5 11.433 18.933 13 17 13H16M10.5 13L11 19H13L13.5 13M10.5 13H13.5M8 19H16\"\n      stroke={color}\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n  </svg>\n);\n\nexport const BookOpenIcon: FC<IconProps> = ({ className, size = 24, color = 'currentColor' }) => (\n  <svg\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    className={className}\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M12 6.253v13m0-13c-1.198-1.198-2.697-1.753-4.253-1.753-1.556 0-3.055.555-4.253 1.753v11c1.198-1.198 2.697-1.753 4.253-1.753 1.556 0 3.055.555 4.253 1.753m0-13c1.198-1.198 2.697-1.753 4.253-1.753 1.556 0 3.055.555 4.253 1.753v11c-1.198-1.198-2.697-1.753-4.253-1.753-1.556 0-3.055.555-4.253 1.753\"\n      stroke={color}\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n  </svg>\n);\n\nexport const CheckCircleIcon: FC<IconProps> = ({\n  className,\n  size = 24,\n  color = 'currentColor',\n}) => (\n  <svg\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    className={className}\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"\n      stroke={color}\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n  </svg>\n);\n\nexport const RefreshIcon: FC<IconProps> = ({ className, size = 24, color = 'currentColor' }) => (\n  <svg\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    className={className}\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\"\n      stroke={color}\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n  </svg>\n);\n\nexport const DragHandleIcon: FC<IconProps> = ({ className, size = 24, color = 'currentColor' }) => (\n  <svg\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    className={className}\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M8 6h.01M8 12h.01M8 18h.01M12 6h.01M12 12h.01M12 18h.01M16 6h.01M16 12h.01M16 18h.01\"\n      stroke={color}\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n  </svg>\n);\n\nexport const ChartBarIcon: FC<IconProps> = ({ className, size = 24, color = 'currentColor' }) => (\n  <svg\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    className={className}\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M9 19V13M12 19V8M15 19V3M3 19L21 19\"\n      stroke={color}\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n  </svg>\n);\n\nexport const SaveIcon: FC<IconProps> = ({ className, size = 24, color = 'currentColor' }) => (\n  <svg\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    className={className}\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V4\"\n      stroke={color}\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n  </svg>\n);\n\nexport const ClockIcon: FC<IconProps> = ({ className, size = 24, color = 'currentColor' }) => (\n  <svg\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    className={className}\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\"\n      stroke={color}\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n  </svg>\n);\n\nexport const InformationCircleIcon: FC<IconProps> = ({\n  className,\n  size = 24,\n  color = 'currentColor',\n}) => (\n  <svg\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    className={className}\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n      stroke={color}\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n  </svg>\n);\n\nexport const RestartIcon: FC<IconProps> = ({ className, size = 24, color = 'currentColor' }) => (\n  <svg\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    className={className}\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\"\n      stroke={color}\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n  </svg>\n);\n\nexport const BackIcon: FC<IconProps> = ({ className, size = 24, color = 'currentColor' }) => (\n  <svg\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    className={className}\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M9 12l-2-2m0 0l2-2m-2 2h10.5a1.5 1.5 0 110 3h-3\"\n      stroke={color}\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n  </svg>\n);\n","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { FlashcardsSettings, LearnModeSettings, ModeSettings, ReadModeSettings } from '@/types';\n\ninterface UnifiedSettingsStore {\n  // Settings by deck and mode\n  flashcardsSettings: Record<string, FlashcardsSettings>;\n  learnSettings: Record<string, LearnModeSettings>;\n  matchSettings: Record<string, ModeSettings>;\n  testSettings: Record<string, ModeSettings>;\n  readSettings: Record<string, ReadModeSettings>;\n\n  // Preset selections per deck and mode\n  presetSelections: Record<string, { [mode: string]: string }>;\n\n  // Actions\n  getSettingsForMode: (\n    deckId: string,\n    mode: string\n  ) => ModeSettings | FlashcardsSettings | LearnModeSettings | ReadModeSettings;\n  updateSettings: (\n    deckId: string,\n    mode: string,\n    settings: ModeSettings | FlashcardsSettings | LearnModeSettings | ReadModeSettings\n  ) => void;\n  applyPreset: (deckId: string, mode: string, presetId: string) => void;\n  getSettings: (key: string) => any;\n  saveSettings: (key: string, settings: any) => void;\n  migrateOldSettings: () => void;\n}\n\n// Default settings for each mode\nconst getDefaultSettings = (mode: string): any => {\n  const defaults: Record<string, any> = {\n    flashcards: {\n      frontSides: ['side_a'],\n      backSides: ['side_b'],\n      progressionMode: 'shuffle' as const,\n      includeMastered: true,\n      enableTimer: false,\n      timerSeconds: 30,\n      enableAudio: false,\n      groupSides: {},\n    },\n    learn: {\n      questionSides: ['side_a'],\n      answerSides: ['side_b'],\n      cardsPerRound: 10,\n      randomize: true,\n      enableTimer: false,\n      timerSeconds: 30,\n      enableAudio: false,\n      questionTypeMix: 'auto' as const,\n      progressionMode: 'sequential' as const,\n      schedulingAlgorithm: 'smart_spaced' as const,\n      masteryThreshold: 3,\n      progressiveLearning: 'spaced' as const,\n      progressiveLearningSpacing: 3,\n      questionTypes: ['multiple_choice', 'free_text'],\n      adaptiveDifficulty: false,\n      frontSides: ['side_a'],\n      backSides: ['side_b'],\n    },\n    match: {\n      frontSides: ['side_a'],\n      backSides: ['side_b'],\n      cardsPerRound: 12,\n      enableTimer: true,\n      timerSeconds: 60,\n      enableAudio: true,\n      randomize: true,\n      progressionMode: 'random' as const,\n    },\n    test: {\n      frontSides: ['side_a'],\n      backSides: ['side_b'],\n      cardsPerRound: 20,\n      enableTimer: false,\n      timerSeconds: 1800,\n      enableAudio: false,\n      randomize: true,\n      progressionMode: 'sequential' as const,\n    },\n    read: {\n      answerType: 'free_text' as const,\n      checkMode: 'wait' as const,\n      translationDirection: { from: 'a' as const, to: 'c' as const },\n      optionsCount: 4,\n      showPinyinDefault: false,\n      multipleChoiceDifficulty: 'medium' as const,\n      unit: 'character' as const,\n      translationMode: 'sentence' as const,\n      accuracyThreshold: 70,\n      showWordHints: true,\n    },\n  };\n\n  return defaults[mode] || defaults.flashcards;\n};\n\nexport const useSettingsStore = create<UnifiedSettingsStore>()(\n  persist(\n    (set, get) => ({\n      flashcardsSettings: {},\n      learnSettings: {},\n      matchSettings: {},\n      testSettings: {},\n      readSettings: {},\n      presetSelections: {},\n\n      getSettingsForMode: (deckId: string, mode: string) => {\n        const state = get();\n\n        switch (mode) {\n          case 'flashcards':\n            return state.flashcardsSettings[deckId] || getDefaultSettings('flashcards');\n          case 'learn':\n            return state.learnSettings[deckId] || getDefaultSettings('learn');\n          case 'match':\n            return state.matchSettings[deckId] || getDefaultSettings('match');\n          case 'test':\n            return state.testSettings[deckId] || getDefaultSettings('test');\n          case 'read':\n            return state.readSettings[deckId] || getDefaultSettings('read');\n          default:\n            return getDefaultSettings(mode);\n        }\n      },\n\n      updateSettings: (deckId: string, mode: string, settings: any) => {\n        set(state => {\n          switch (mode) {\n            case 'flashcards':\n              return {\n                ...state,\n                flashcardsSettings: {\n                  ...state.flashcardsSettings,\n                  [deckId]: settings,\n                },\n              };\n            case 'learn':\n              return {\n                ...state,\n                learnSettings: {\n                  ...state.learnSettings,\n                  [deckId]: settings as LearnModeSettings,\n                },\n              };\n            case 'match':\n              return {\n                ...state,\n                matchSettings: {\n                  ...state.matchSettings,\n                  [deckId]: settings,\n                },\n              };\n            case 'test':\n              return {\n                ...state,\n                testSettings: {\n                  ...state.testSettings,\n                  [deckId]: settings,\n                },\n              };\n            case 'read':\n              return {\n                ...state,\n                readSettings: {\n                  ...state.readSettings,\n                  [deckId]: settings as ReadModeSettings,\n                },\n              };\n            default:\n              return state;\n          }\n        });\n      },\n\n      applyPreset: (deckId: string, mode: string, presetId: string) => {\n        set(state => ({\n          ...state,\n          presetSelections: {\n            ...state.presetSelections,\n            [deckId]: {\n              ...state.presetSelections[deckId],\n              [mode]: presetId,\n            },\n          },\n        }));\n      },\n\n      getSettings: (key: string) => {\n        // Generic getter for backwards compatibility\n        const stored = localStorage.getItem(key);\n        if (stored) {\n          try {\n            return JSON.parse(stored);\n          } catch {\n            return null;\n          }\n        }\n        return null;\n      },\n\n      saveSettings: (key: string, settings: any) => {\n        // Generic setter for backwards compatibility\n        localStorage.setItem(key, JSON.stringify(settings));\n      },\n\n      migrateOldSettings: () => {\n        const migrationVersion = '1.0.0';\n        const existingVersion = localStorage.getItem('settings-migration-version');\n\n        if (existingVersion === migrationVersion) {\n          return; // Already migrated\n        }\n\n        try {\n          // Migrate flashcards settings\n          const oldFlashcardsSettings = localStorage.getItem('flashcards-settings');\n          if (oldFlashcardsSettings) {\n            const parsed = JSON.parse(oldFlashcardsSettings);\n            set(state => ({\n              ...state,\n              flashcardsSettings: parsed,\n            }));\n          }\n\n          // Migrate learn settings\n          const oldLearnSettings = localStorage.getItem('learn-settings');\n          if (oldLearnSettings) {\n            const parsed = JSON.parse(oldLearnSettings);\n            set(state => ({\n              ...state,\n              learnSettings: parsed,\n            }));\n          }\n\n          // Mark migration complete\n          localStorage.setItem('settings-migration-version', migrationVersion);\n\n          // Clean up old keys after successful migration\n          localStorage.removeItem('flashcards-settings');\n          localStorage.removeItem('learn-settings');\n        } catch (error) {\n          console.error('Settings migration failed:', error);\n          // Don't mark as migrated, will retry next time\n        }\n      },\n    }),\n    {\n      name: 'unified-settings-store',\n      partialize: state => ({\n        flashcardsSettings: state.flashcardsSettings,\n        learnSettings: state.learnSettings,\n        matchSettings: state.matchSettings,\n        testSettings: state.testSettings,\n        presetSelections: state.presetSelections,\n      }),\n      onRehydrateStorage: () => state => {\n        // Run migration after rehydration\n        state?.migrateOldSettings();\n      },\n    }\n  )\n);\n","import { PresetDefinition } from '@/components/modals/UnifiedSettings';\n\nexport const UNIVERSAL_PRESETS: PresetDefinition[] = [\n  {\n    id: 'simple',\n    label: 'Simple',\n    shortLabel: 'A → B',\n    description: 'First side to second side',\n    tooltip: 'Show first side, answer with second side',\n    supportedModes: ['flashcards', 'learn', 'match'],\n    applyToMode: (mode, sides) => {\n      if (mode === 'flashcards') {\n        return {\n          frontSides: [sides[0] || 'side_a'],\n          backSides: [sides[1] || 'side_b'],\n        };\n      }\n      if (mode === 'learn') {\n        return {\n          questionSides: [sides[0] || 'side_a'],\n          answerSides: [sides[1] || 'side_b'],\n          questionTypeMix: 'auto' as const,\n        };\n      }\n      if (mode === 'match') {\n        return {\n          frontSides: [sides[0] || 'side_a'],\n          backSides: [sides[1] || 'side_b'],\n        };\n      }\n      return {};\n    },\n  },\n  {\n    id: 'reverse',\n    label: 'Reverse',\n    shortLabel: 'B → A',\n    description: 'Second side to first side',\n    tooltip: 'Reverse the standard direction for learning',\n    supportedModes: ['flashcards', 'learn'],\n    applyToMode: (mode, sides) => {\n      if (mode === 'flashcards') {\n        return {\n          frontSides: [sides[1] || 'side_b'],\n          backSides: [sides[0] || 'side_a'],\n        };\n      }\n      if (mode === 'learn') {\n        return {\n          questionSides: [sides[1] || 'side_b'],\n          answerSides: [sides[0] || 'side_a'],\n          questionTypeMix: 'auto' as const,\n        };\n      }\n      return {};\n    },\n  },\n  {\n    id: 'comprehensive',\n    label: 'Complete',\n    shortLabel: 'A → All',\n    description: 'First side to all other sides',\n    tooltip: 'Show all available information in answers',\n    supportedModes: ['flashcards', 'learn'],\n    applyToMode: (mode, sides) => {\n      if (mode === 'flashcards') {\n        return {\n          frontSides: [sides[0] || 'side_a'],\n          backSides: sides.slice(1).length > 0 ? sides.slice(1) : ['side_b'],\n        };\n      }\n      if (mode === 'learn') {\n        return {\n          questionSides: [sides[0] || 'side_a'],\n          answerSides: sides.slice(1).length > 0 ? sides.slice(1) : ['side_b'],\n          questionTypeMix: 'multiple_choice' as const,\n          cardsPerRound: 20,\n        };\n      }\n      return {};\n    },\n  },\n  {\n    id: 'multi',\n    label: 'Multi',\n    shortLabel: 'AB → CD',\n    description: 'Multiple sides for comprehensive learning',\n    tooltip: 'Show multiple pieces of information together',\n    supportedModes: ['flashcards', 'learn'],\n    applyToMode: (mode, sides) => {\n      if (mode === 'flashcards') {\n        const frontCount = Math.min(2, Math.floor(sides.length / 2));\n        return {\n          frontSides:\n            sides.slice(0, frontCount).length > 0 ? sides.slice(0, frontCount) : ['side_a'],\n          backSides: sides.slice(frontCount).length > 0 ? sides.slice(frontCount) : ['side_b'],\n        };\n      }\n      if (mode === 'learn') {\n        const questions = sides.filter((_, i) => i % 2 === 0);\n        const answers = sides.filter((_, i) => i % 2 === 1);\n        return {\n          questionSides: questions.length > 0 ? questions : ['side_a'],\n          answerSides: answers.length > 0 ? answers : ['side_b'],\n          questionTypeMix: 'mixed' as const,\n          randomize: true,\n        };\n      }\n      return {};\n    },\n  },\n  {\n    id: 'formal',\n    label: 'Formal Test',\n    shortLabel: 'Timed',\n    description: 'Timed test with scoring',\n    tooltip: 'Formal assessment with time limits and scoring',\n    supportedModes: ['test'],\n    applyToMode: (mode, sides) => {\n      if (mode === 'test') {\n        return {\n          frontSides: [sides[0] || 'side_a'],\n          backSides: [sides[1] || 'side_b'],\n          enableTimer: true,\n          timerSeconds: 1800, // 30 minutes\n          randomize: false,\n          progressionMode: 'sequential' as const,\n        };\n      }\n      return {};\n    },\n  },\n  {\n    id: 'practice',\n    label: 'Practice Test',\n    shortLabel: 'Untimed',\n    description: 'Untimed practice with immediate feedback',\n    tooltip: 'Practice mode with immediate feedback and no time pressure',\n    supportedModes: ['test'],\n    applyToMode: (mode, sides) => {\n      if (mode === 'test') {\n        return {\n          frontSides: [sides[0] || 'side_a'],\n          backSides: [sides[1] || 'side_b'],\n          enableTimer: false,\n          timerSeconds: null,\n          randomize: true,\n          progressionMode: 'random' as const,\n        };\n      }\n      return {};\n    },\n  },\n];\n","import { useState, useEffect, useCallback, useMemo } from 'react';\nimport { UnifiedSettingsConfig } from '@/components/modals/UnifiedSettings';\nimport { useSettingsStore } from '@/store/settingsStore';\nimport { UNIVERSAL_PRESETS } from '@/constants/presets';\n\nexport const useUnifiedSettings = (\n  initialSettings: any,\n  config: UnifiedSettingsConfig,\n  onUpdateSettings: (settings: any) => void\n) => {\n  const [localSettings, setLocalSettings] = useState(initialSettings);\n  const { saveSettings, getSettings } = useSettingsStore();\n\n  // Load settings on mount\n  useEffect(() => {\n    const loadSettings = async () => {\n      const stored = getSettings(config.persistenceKey);\n      if (stored) {\n        setLocalSettings(stored);\n      } else {\n        setLocalSettings(initialSettings);\n      }\n    };\n    loadSettings();\n  }, [config.persistenceKey, initialSettings]);\n\n  // Update a single setting\n  const updateSetting = useCallback((key: string, value: any) => {\n    setLocalSettings((prev: any) => ({\n      ...prev,\n      [key]: value,\n    }));\n  }, []);\n\n  // Apply a preset\n  const applyPreset = useCallback(\n    (presetId: string) => {\n      const preset = UNIVERSAL_PRESETS.find(p => p.id === presetId);\n      if (!preset || !preset.supportedModes.includes(config.mode)) {\n        return;\n      }\n\n      // Get available sides for this deck\n      const availableSides = getAvailableSidesFromSettings(localSettings);\n      const presetSettings = preset.applyToMode(config.mode, availableSides);\n\n      setLocalSettings((prev: any) => ({\n        ...prev,\n        ...presetSettings,\n      }));\n    },\n    [config.mode, localSettings]\n  );\n\n  // Validate settings\n  const validate = useCallback(\n    (settings: any): Record<string, string> => {\n      const errors: Record<string, string> = {};\n\n      config.validationRules.forEach(rule => {\n        if (!rule.validator(settings[rule.field], settings)) {\n          errors[rule.field] = rule.errorMessage;\n        }\n      });\n\n      return errors;\n    },\n    [config.validationRules]\n  );\n\n  // Save settings\n  const handleSave = useCallback(async () => {\n    const validationErrors = validate(localSettings);\n    if (Object.keys(validationErrors).length > 0) {\n      throw new Error('Validation failed');\n    }\n\n    // Save to store\n    saveSettings(config.persistenceKey, localSettings);\n\n    // Call parent update handler\n    onUpdateSettings(localSettings);\n  }, [localSettings, validate, saveSettings, config.persistenceKey, onUpdateSettings]);\n\n  // Get applicable presets for current mode\n  const applicablePresets = useMemo(() => {\n    return UNIVERSAL_PRESETS.filter(p => p.supportedModes.includes(config.mode));\n  }, [config.mode]);\n\n  return {\n    localSettings,\n    updateSetting,\n    applyPreset,\n    handleSave,\n    validate,\n    applicablePresets,\n  };\n};\n\n// Helper function to extract available sides from settings\nconst getAvailableSidesFromSettings = (settings: any): string[] => {\n  // Try to extract from various settings formats\n  if (settings.frontSides && settings.backSides) {\n    const allSides = [...settings.frontSides, ...settings.backSides];\n    return [...new Set(allSides)];\n  }\n\n  if (settings.questionSides && settings.answerSides) {\n    const allSides = [...settings.questionSides, ...settings.answerSides];\n    return [...new Set(allSides)];\n  }\n\n  // Default sides\n  return ['side_a', 'side_b'];\n};\n","import { FC, useMemo } from 'react';\nimport { motion } from 'framer-motion';\nimport { UNIVERSAL_PRESETS } from '@/constants/presets';\nimport { SectionProps } from '../UnifiedSettings';\nimport styles from './QuickPresets.module.css';\n\nconst QuickPresets: FC<SectionProps> = ({ settings, onChange, mode = 'flashcards', deck }) => {\n  // Get presets applicable to current mode\n  const applicablePresets = useMemo(() => {\n    return UNIVERSAL_PRESETS.filter(preset => preset.supportedModes.includes(mode));\n  }, [mode]);\n\n  // Determine which preset is currently active (if any)\n  const activePresetId = useMemo(() => {\n    // Simple heuristic to detect active preset based on current settings\n    for (const preset of applicablePresets) {\n      const presetSettings = preset.applyToMode(mode, getAvailableSides(settings, deck));\n      if (isPresetActive(settings, presetSettings, mode)) {\n        return preset.id;\n      }\n    }\n    return null;\n  }, [settings, applicablePresets, mode, deck]);\n\n  const handlePresetClick = (presetId: string) => {\n    const preset = UNIVERSAL_PRESETS.find(p => p.id === presetId);\n    if (!preset) return;\n\n    const availableSides = getAvailableSides(settings, deck);\n    const presetSettings = preset.applyToMode(mode, availableSides);\n\n    // Apply all preset settings\n    Object.entries(presetSettings).forEach(([key, value]) => {\n      onChange(key, value);\n    });\n  };\n\n  if (applicablePresets.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className={styles.container}>\n      <h3 className={styles.title}>Quick Presets</h3>\n      <div className={styles.presets}>\n        {applicablePresets.map((preset, index) => (\n          <motion.button\n            key={preset.id}\n            className={`${styles.presetButton} ${\n              activePresetId === preset.id ? styles.active : ''\n            }`}\n            onClick={() => handlePresetClick(preset.id)}\n            title={preset.tooltip}\n            data-testid={`preset-${preset.id}`}\n            initial={{ opacity: 0, y: 10 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: index * 0.05 }}\n            whileHover={{ scale: 1.05 }}\n            whileTap={{ scale: 0.95 }}\n          >\n            <span className={styles.presetLabel}>{preset.label}</span>\n          </motion.button>\n        ))}\n      </div>\n    </div>\n  );\n};\n\n// Helper function to get available sides from deck\nconst getAvailableSides = (_settings: any, deck: any): string[] => {\n  // If deck exists and has content, determine available sides from the first card\n  if (deck && deck.content && deck.content.length > 0) {\n    const firstCard = deck.content[0];\n    const availableSides: string[] = [];\n\n    // Check which sides exist on the card\n    if (firstCard.side_a !== undefined && firstCard.side_a !== null) availableSides.push('side_a');\n    if (firstCard.side_b !== undefined && firstCard.side_b !== null) availableSides.push('side_b');\n    if (firstCard.side_c !== undefined && firstCard.side_c !== null) availableSides.push('side_c');\n    if (firstCard.side_d !== undefined && firstCard.side_d !== null) availableSides.push('side_d');\n    if (firstCard.side_e !== undefined && firstCard.side_e !== null) availableSides.push('side_e');\n    if (firstCard.side_f !== undefined && firstCard.side_f !== null) availableSides.push('side_f');\n\n    // Return available sides if we found any\n    if (availableSides.length > 0) {\n      return availableSides;\n    }\n  }\n\n  // Fallback to defaults if no deck info\n  return ['side_a', 'side_b'];\n};\n\n// Helper function to check if preset is currently active\nconst isPresetActive = (currentSettings: any, presetSettings: any, mode: string): boolean => {\n  // Check key settings based on mode\n  if (mode === 'flashcards') {\n    return (\n      JSON.stringify(currentSettings.frontSides) === JSON.stringify(presetSettings.frontSides) &&\n      JSON.stringify(currentSettings.backSides) === JSON.stringify(presetSettings.backSides)\n    );\n  }\n\n  if (mode === 'learn') {\n    return (\n      JSON.stringify(currentSettings.questionSides) ===\n        JSON.stringify(presetSettings.questionSides) &&\n      JSON.stringify(currentSettings.answerSides) === JSON.stringify(presetSettings.answerSides) &&\n      currentSettings.questionTypeMix === presetSettings.questionTypeMix\n    );\n  }\n\n  // For other modes, just check front and back sides\n  return (\n    JSON.stringify(currentSettings.frontSides) === JSON.stringify(presetSettings.frontSides) &&\n    JSON.stringify(currentSettings.backSides) === JSON.stringify(presetSettings.backSides)\n  );\n};\n\nexport default QuickPresets;\n","import { FC, useMemo } from 'react';\nimport { motion } from 'framer-motion';\nimport { Deck } from '@/types';\nimport { SectionProps } from '../UnifiedSettings';\nimport styles from './SideConfiguration.module.css';\n\ninterface ExtendedSectionProps extends SectionProps {\n  deck?: Deck | null;\n  settings: any;\n}\n\nconst SideConfiguration: FC<ExtendedSectionProps> = ({ settings, onChange, deck, error }) => {\n  // Determine section type from settings\n  const sectionType = settings.sectionType || 'front';\n\n  // Get available sides from deck\n  const availableSides = useMemo(() => {\n    if (!deck || !deck.content || deck.content.length === 0) return [];\n\n    const firstCard = deck.content[0];\n    const sides: string[] = [];\n\n    if (firstCard.side_a) sides.push('side_a');\n    if (firstCard.side_b) sides.push('side_b');\n    if (firstCard.side_c) sides.push('side_c');\n    if (firstCard.side_d) sides.push('side_d');\n    if (firstCard.side_e) sides.push('side_e');\n    if (firstCard.side_f) sides.push('side_f');\n\n    return sides;\n  }, [deck]);\n\n  // Get side labels from deck metadata\n  const getSideLabel = (side: string): string => {\n    const label = deck?.metadata?.side_labels?.[side as keyof typeof deck.metadata.side_labels];\n    if (label) {\n      return label.charAt(0).toUpperCase() + label.slice(1);\n    }\n\n    const sideIndex = side.split('_')[1]?.toUpperCase();\n    return `Side ${sideIndex}`;\n  };\n\n  // Get selected sides based on section type\n  const selectedSides = useMemo(() => {\n    if (sectionType === 'front') {\n      return settings.frontSides || [];\n    } else if (sectionType === 'back') {\n      return settings.backSides || [];\n    } else if (sectionType === 'question') {\n      return settings.questionSides || [];\n    } else if (sectionType === 'answer') {\n      return settings.answerSides || [];\n    }\n    return [];\n  }, [settings, sectionType]);\n\n  // Handle side toggle\n  const toggleSide = (side: string) => {\n    const currentSides = [...selectedSides];\n    const sideIndex = currentSides.indexOf(side);\n\n    if (sideIndex > -1) {\n      currentSides.splice(sideIndex, 1);\n    } else {\n      currentSides.push(side);\n    }\n\n    // Update the appropriate setting based on section type\n    if (sectionType === 'front') {\n      onChange('frontSides', currentSides);\n    } else if (sectionType === 'back') {\n      onChange('backSides', currentSides);\n    } else if (sectionType === 'question') {\n      onChange('questionSides', currentSides);\n    } else if (sectionType === 'answer') {\n      onChange('answerSides', currentSides);\n    }\n  };\n\n  // Get title and description based on section type\n  const getSectionInfo = () => {\n    switch (sectionType) {\n      case 'front':\n        return {\n          title: 'Card Front',\n          description: 'Select which sides appear on the front of the card',\n        };\n      case 'back':\n        return {\n          title: 'Card Back',\n          description: 'Select which sides appear on the back of the card',\n        };\n      case 'question':\n        return {\n          title: 'Question Sides',\n          description: 'Select which sides to use for questions',\n        };\n      case 'answer':\n        return {\n          title: 'Answer Sides',\n          description: 'Select which sides to use for answers',\n        };\n      default:\n        return {\n          title: 'Side Configuration',\n          description: 'Select which sides to use',\n        };\n    }\n  };\n\n  const { title, description } = getSectionInfo();\n\n  return (\n    <div className={styles.container}>\n      <h3 className={styles.title}>{title}</h3>\n      <p className={styles.description}>{description}</p>\n\n      <div className={styles.sideSelector}>\n        {availableSides.map((side, index) => (\n          <motion.button\n            key={side}\n            className={`${styles.sideOption} ${\n              selectedSides.includes(side) ? styles.selected : ''\n            }`}\n            onClick={() => toggleSide(side)}\n            initial={{ opacity: 0, scale: 0.9 }}\n            animate={{ opacity: 1, scale: 1 }}\n            transition={{ delay: index * 0.05 }}\n            whileHover={{ scale: 1.05 }}\n            whileTap={{ scale: 0.95 }}\n          >\n            <span className={styles.sideLabel}>{getSideLabel(side)}</span>\n            {selectedSides.includes(side) && <span className={styles.checkmark}>✓</span>}\n          </motion.button>\n        ))}\n      </div>\n\n      {selectedSides.length === 0 && (\n        <div className={styles.warning}>⚠️ At least one side must be selected</div>\n      )}\n\n      {error && (\n        <div className={styles.error} role=\"alert\">\n          {error}\n        </div>\n      )}\n\n      {selectedSides.length > 0 && (\n        <div className={styles.selectedInfo}>\n          {selectedSides.length} side{selectedSides.length === 1 ? '' : 's'} selected\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SideConfiguration;\n","import { FC } from 'react';\nimport { SectionProps } from '../UnifiedSettings';\nimport styles from './ProgressionSettings.module.css';\n\nconst ProgressionSettings: FC<SectionProps> = ({ settings, onChange, mode = 'flashcards' }) => {\n  // Get current progression mode\n  const currentMode = settings.progressionMode || 'shuffle';\n\n  // Use identical options for both flashcards and learn modes\n  const getOptions = () => {\n    // Same options for flashcards and learn to ensure consistency\n    if (mode === 'flashcards' || mode === 'learn') {\n      return [\n        { value: 'shuffle', label: 'Shuffle', description: 'Random order for better retention' },\n        { value: 'sequential', label: 'Sequential', description: 'Content in order as it appears' },\n        {\n          value: 'level',\n          label: 'By Level',\n          description: 'Progressive difficulty based on performance',\n        },\n      ];\n    } else {\n      // Deck and other modes\n      return [\n        { value: 'sequential', label: 'Sequential', description: 'In order' },\n        { value: 'random', label: 'Random', description: 'Randomized order' },\n      ];\n    }\n  };\n\n  const options = getOptions();\n\n  const handleChange = (value: string) => {\n    onChange('progressionMode', value);\n  };\n\n  return (\n    <div className={styles.container}>\n      <h3 className={styles.title}>Progression Mode</h3>\n      <p className={styles.description}>Choose how content is presented during your session</p>\n\n      <div className={styles.progressionOptions}>\n        {options.map(option => (\n          <label key={option.value} className={styles.radioOption}>\n            <input\n              type=\"radio\"\n              name=\"progression\"\n              value={option.value}\n              checked={currentMode === option.value}\n              onChange={e => handleChange(e.target.value)}\n              className={styles.radioInput}\n            />\n            <div className={styles.radioContent}>\n              <span className={styles.radioLabel}>{option.label}</span>\n              <span className={styles.radioDescription}>{option.description}</span>\n            </div>\n          </label>\n        ))}\n      </div>\n\n      {currentMode === 'shuffle' && (\n        <div className={styles.infoBox}>\n          <span className={styles.infoIcon}>ℹ️</span>\n          <span className={styles.infoText}>\n            Shuffled content improves long-term retention through varied practice\n          </span>\n        </div>\n      )}\n\n      {currentMode === 'level' && (\n        <div className={styles.infoBox}>\n          <span className={styles.infoIcon}>ℹ️</span>\n          <span className={styles.infoText}>\n            Progressive difficulty adapts based on your performance\n          </span>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ProgressionSettings;\n","import { FC } from 'react';\nimport { SectionProps } from '../UnifiedSettings';\nimport { ClockIcon } from '@/components/icons/StatusIcons';\nimport styles from './LearningSettings.module.css';\n\n// Info Icon Component for tooltips\nconst InfoTooltip: FC<{ text: string }> = ({ text }) => (\n  <span className={styles.infoTooltipWrapper}>\n    <span className={styles.infoIcon}>ℹ️</span>\n    <span className={styles.infoTooltip}>{text}</span>\n  </span>\n);\n\nconst LearningSettings: FC<SectionProps> = ({ settings, onChange }) => {\n  return (\n    <div className={styles.container}>\n      <h3 className={styles.title}>\n        <ClockIcon size={20} className={styles.titleIcon} />\n        Learning Settings\n      </h3>\n\n      <div className={styles.settingsGrid}>\n        {/* Cards per round */}\n        <label className={styles.settingRow}>\n          <div className={styles.labelContainer}>\n            <span className={styles.label}>\n              Cards per round\n              <InfoTooltip text=\"Number of cards to practice per session\" />\n            </span>\n          </div>\n          <input\n            type=\"number\"\n            min=\"5\"\n            max=\"50\"\n            value={settings.cardsPerRound === '' ? '' : (settings.cardsPerRound || 10)}\n            onChange={e => {\n              const value = e.target.value;\n              // Allow empty values so users can delete and retype\n              if (value === '') {\n                onChange('cardsPerRound', '');\n              } else {\n                const numValue = parseInt(value);\n                if (!isNaN(numValue)) {\n                  onChange('cardsPerRound', numValue);\n                }\n              }\n            }}\n            onBlur={e => {\n              // Apply defaults and validation only on blur\n              const value = e.target.value === '' ? 10 : parseInt(e.target.value) || 10;\n              onChange('cardsPerRound', Math.max(5, Math.min(50, value)));\n            }}\n            inputMode=\"numeric\"\n            pattern=\"[0-9]*\"\n            className={styles.numberInput}\n          />\n        </label>\n\n        {/* Question type mix */}\n        <label className={styles.settingRow}>\n          <span className={styles.label}>Question type mix</span>\n          <select\n            value={settings.questionTypeMix || 'auto'}\n            onChange={e => onChange('questionTypeMix', e.target.value)}\n            className={styles.select}\n          >\n            <option value=\"auto\">Auto (80% MC, 20% Text)</option>\n            <option value=\"multiple_choice\">Multiple Choice Only</option>\n            <option value=\"free_text\">Free Text Only</option>\n            <option value=\"mixed\">50/50 Mix</option>\n          </select>\n        </label>\n\n        {/* Scheduling algorithm */}\n        <label className={styles.settingRow}>\n          <div className={styles.labelContainer}>\n            <span className={styles.label}>\n              Scheduling algorithm\n              <InfoTooltip text=\"How cards are scheduled for review\" />\n            </span>\n          </div>\n          <select\n            value={settings.schedulingAlgorithm || 'smart_spaced'}\n            onChange={e => onChange('schedulingAlgorithm', e.target.value)}\n            className={styles.select}\n          >\n            <option value=\"smart_spaced\">Smart Spaced (Adaptive)</option>\n            <option value=\"leitner_box\">Leitner Box System</option>\n          </select>\n        </label>\n\n        {/* Randomize cards */}\n        <label className={styles.checkboxRow}>\n          <div className={styles.checkboxContainer}>\n            <input\n              type=\"checkbox\"\n              checked={settings.randomize !== false}\n              onChange={e => onChange('randomize', e.target.checked)}\n              className={styles.checkbox}\n            />\n            <span className={styles.checkboxLabel}>Randomize cards</span>\n          </div>\n        </label>\n\n        {/* Enable timer */}\n        <label className={styles.checkboxRow}>\n          <div className={styles.checkboxContainer}>\n            <input\n              type=\"checkbox\"\n              checked={settings.enableTimer === true}\n              onChange={e => onChange('enableTimer', e.target.checked)}\n              className={styles.checkbox}\n            />\n            <span className={styles.checkboxLabel}>Enable timer</span>\n          </div>\n        </label>\n\n        {/* Timer seconds (conditional) */}\n        {settings.enableTimer && (\n          <label className={styles.settingRow}>\n            <span className={styles.label}>Timer seconds</span>\n            <input\n              type=\"number\"\n              min=\"10\"\n              max=\"120\"\n              value={settings.timerSeconds === '' ? '' : (settings.timerSeconds || 30)}\n              onChange={e => {\n                const value = e.target.value;\n                // Allow empty values so users can delete and retype\n                if (value === '') {\n                  onChange('timerSeconds', '');\n                } else {\n                  const numValue = parseInt(value);\n                  if (!isNaN(numValue)) {\n                    onChange('timerSeconds', numValue);\n                  }\n                }\n              }}\n              onBlur={e => {\n                // Apply defaults and validation only on blur\n                const value = e.target.value === '' ? 30 : parseInt(e.target.value) || 30;\n                onChange('timerSeconds', Math.max(10, Math.min(120, value)));\n              }}\n              inputMode=\"numeric\"\n              pattern=\"[0-9]*\"\n              className={styles.numberInput}\n            />\n          </label>\n        )}\n      </div>\n\n      {/* Progressive Learning Section */}\n      <div className={styles.subsection}>\n        <h4 className={styles.subsectionTitle}>\n          Progressive Learning\n          <InfoTooltip text=\"Control how free text questions follow multiple choice\" />\n        </h4>\n\n        <label className={styles.settingRow}>\n          <span className={styles.label}>Progressive mode</span>\n          <select\n            value={settings.progressiveLearning || 'spaced'}\n            onChange={e => onChange('progressiveLearning', e.target.value)}\n            className={styles.select}\n          >\n            <option value=\"disabled\">Disabled (No follow-ups)</option>\n            <option value=\"immediate\">Immediate (Right after MC)</option>\n            <option value=\"spaced\">Spaced (With gap)</option>\n            <option value=\"random\">Random (30% chance)</option>\n          </select>\n        </label>\n\n        {settings.progressiveLearning === 'spaced' && (\n          <label className={styles.settingRow}>\n            <span className={styles.label}>Minimum spacing</span>\n            <input\n              type=\"number\"\n              min=\"1\"\n              max=\"10\"\n              value={settings.progressiveLearningSpacing === '' ? '' : (settings.progressiveLearningSpacing || 3)}\n              onChange={e => {\n                const value = e.target.value;\n                // Allow empty values so users can delete and retype\n                if (value === '') {\n                  onChange('progressiveLearningSpacing', '');\n                } else {\n                  const numValue = parseInt(value);\n                  if (!isNaN(numValue)) {\n                    onChange('progressiveLearningSpacing', numValue);\n                  }\n                }\n              }}\n              onBlur={e => {\n                // Apply defaults and validation only on blur\n                const value = e.target.value === '' ? 3 : parseInt(e.target.value) || 3;\n                onChange('progressiveLearningSpacing', Math.max(1, Math.min(10, value)));\n              }}\n              inputMode=\"numeric\"\n              pattern=\"[0-9]*\"\n              className={styles.numberInput}\n            />\n          </label>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default LearningSettings;\n","import { FC, useState } from 'react';\nimport { SectionProps } from '../UnifiedSettings';\nimport { useDeckStore } from '@/store/deckStore';\nimport { TrophyIcon } from '@/components/icons/StatusIcons';\nimport styles from './MasterySettings.module.css';\n\n// Info Icon Component for tooltips\nconst InfoTooltip: FC<{ text: string }> = ({ text }) => (\n  <span className={styles.infoIcon} title={text}>\n    ℹ️\n  </span>\n);\n\ninterface ExtendedSectionProps extends SectionProps {\n  onResetMastery?: () => void;\n}\n\nconst MasterySettings: FC<ExtendedSectionProps> = ({\n  settings,\n  onChange,\n  deck,\n  mode = 'flashcards',\n  onResetMastery,\n}) => {\n  const [isConfirming, setIsConfirming] = useState(false);\n  const { getMasteredCardsForDeck, shuffleMasteredCardsBack, toggleShuffleMastered } =\n    useDeckStore();\n  const masteredCount = deck ? getMasteredCardsForDeck(deck.id).length : 0;\n\n  // For deck mode, show mastery management\n  if (mode === 'deck') {\n    const handleReset = () => {\n      if (!isConfirming) {\n        setIsConfirming(true);\n        return;\n      }\n      if (onResetMastery) {\n        onResetMastery();\n      }\n      setIsConfirming(false);\n    };\n\n    const cancelConfirm = () => setIsConfirming(false);\n\n    return (\n      <div className={styles.container}>\n        <h3 className={styles.title}>\n          <TrophyIcon size={20} className={styles.titleIcon} />\n          Mastery Management\n        </h3>\n\n        <div className={styles.resetBox}>\n          <p className={styles.resetDescription}>\n            Reset the mastered card list for this deck. This will clear all mastery progress and\n            allow you to restart learning from scratch.\n          </p>\n\n          {masteredCount > 0 && (\n            <div className={styles.masteredInfo}>\n              Currently, {masteredCount} card{masteredCount === 1 ? ' is' : 's are'} mastered in\n              this deck.\n            </div>\n          )}\n\n          <div className={styles.warningBox}>\n            <span className={styles.warningIcon}>⚠️</span>\n            <span className={styles.warningText}>\n              This action cannot be undone. All mastery progress will be permanently lost.\n            </span>\n          </div>\n\n          <div className={styles.resetActions}>\n            {!isConfirming ? (\n              <button className={styles.resetButton} onClick={handleReset}>\n                Reset Mastered Cards\n              </button>\n            ) : (\n              <div className={styles.confirmRow}>\n                <span className={styles.confirmText}>\n                  Are you sure you want to reset all mastery progress?\n                </span>\n                <div className={styles.confirmButtons}>\n                  <button className={styles.confirmButton} onClick={handleReset}>\n                    Yes, Reset\n                  </button>\n                  <button className={styles.cancelButton} onClick={cancelConfirm}>\n                    Cancel\n                  </button>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // For learn mode, show mastery settings\n  if (mode === 'learn') {\n    return (\n      <div className={styles.container}>\n        <h3 className={styles.title}>\n          <TrophyIcon size={20} className={styles.titleIcon} />\n          Mastery Settings\n        </h3>\n\n        <div className={styles.settingsGrid}>\n          <label className={styles.settingRow}>\n            <div className={styles.labelContainer}>\n              <span className={styles.label}>\n                Mastery threshold\n                <InfoTooltip text=\"Correct answers needed to master a card\" />\n              </span>\n            </div>\n            <input\n              type=\"number\"\n              min=\"1\"\n              max=\"10\"\n              value={settings.masteryThreshold === '' ? '' : (settings.masteryThreshold || 3)}\n              onChange={e => {\n                const value = e.target.value;\n                // Allow empty values so users can delete and retype\n                if (value === '') {\n                  onChange('masteryThreshold', '');\n                } else {\n                  const numValue = parseInt(value);\n                  if (!isNaN(numValue)) {\n                    onChange('masteryThreshold', numValue);\n                  }\n                }\n              }}\n              onBlur={e => {\n                // Apply defaults and validation only on blur\n                const value = e.target.value === '' ? 3 : parseInt(e.target.value) || 3;\n                onChange('masteryThreshold', Math.max(1, Math.min(10, value)));\n              }}\n              inputMode=\"numeric\"\n              pattern=\"[0-9]*\"\n              className={styles.numberInput}\n            />\n          </label>\n\n          <label className={styles.checkboxRow}>\n            <div className={styles.checkboxContainer}>\n              <input\n                type=\"checkbox\"\n                checked={shuffleMasteredCardsBack}\n                onChange={() => toggleShuffleMastered()}\n                className={styles.checkbox}\n              />\n              <span className={styles.checkboxLabel}>\n                Shuffle mastered cards back\n                <InfoTooltip text=\"Periodically include mastered cards in learning sessions for review\" />\n              </span>\n            </div>\n          </label>\n\n          <div className={styles.infoBox}>\n            <strong>How mastery works:</strong> Cards are marked as mastered after{' '}\n            {settings.masteryThreshold || 3} correct answers. Once mastered, cards can be managed\n            from the deck view.\n          </div>\n\n          {masteredCount > 0 && (\n            <div className={styles.masteredStatus}>\n              <TrophyIcon size={16} className={styles.statusIcon} />\n              <span>\n                {masteredCount} card{masteredCount === 1 ? '' : 's'} mastered in this deck\n              </span>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  // For flashcards mode, show mastered cards settings\n  return (\n    <div className={styles.container}>\n      <h3 className={styles.title}>Mastered Cards</h3>\n\n      <div className={styles.masteredSettings}>\n        <label className={styles.checkboxRow}>\n          <div className={styles.checkboxContainer}>\n            <input\n              type=\"checkbox\"\n              checked={settings.includeMastered !== false}\n              onChange={e => onChange('includeMastered', e.target.checked)}\n              className={styles.checkbox}\n            />\n            <span className={styles.checkboxLabel}>Include mastered cards</span>\n          </div>\n        </label>\n\n        {masteredCount > 0 && (\n          <div className={styles.masteredInfo}>\n            {masteredCount} card{masteredCount === 1 ? ' is' : 's are'} currently mastered\n          </div>\n        )}\n\n        {masteredCount > 0 && !settings.includeMastered && (\n          <div className={styles.warningBox}>\n            <span className={styles.warningIcon}>ℹ️</span>\n            <span className={styles.warningText}>\n              {masteredCount} mastered card{masteredCount === 1 ? '' : 's'} will be excluded from\n              this session\n            </span>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MasterySettings;\n","import { FC } from 'react';\nimport { SectionProps } from '../UnifiedSettings';\nimport { InformationCircleIcon } from '@/components/icons/StatusIcons';\nimport styles from './DeckInformation.module.css';\n\nconst DeckInformation: FC<SectionProps> = ({ deck }) => {\n  if (!deck) {\n    return null;\n  }\n\n  return (\n    <div className={styles.container}>\n      <h3 className={styles.title}>\n        <InformationCircleIcon size={20} className={styles.titleIcon} />\n        Deck Information\n      </h3>\n\n      <div className={styles.infoBox}>\n        <div className={styles.infoRow}>\n          <span className={styles.infoLabel}>Deck Name:</span>\n          <span className={styles.infoValue}>{deck.metadata.deck_name}</span>\n        </div>\n\n        <div className={styles.infoRow}>\n          <span className={styles.infoLabel}>Total Cards:</span>\n          <span className={styles.infoValue}>{deck.content.length}</span>\n        </div>\n\n        {deck.metadata.description && (\n          <div className={styles.infoRow}>\n            <span className={styles.infoLabel}>Description:</span>\n            <span className={styles.infoValue}>{deck.metadata.description}</span>\n          </div>\n        )}\n\n        {deck.metadata.category && (\n          <div className={styles.infoRow}>\n            <span className={styles.infoLabel}>Category:</span>\n            <span className={styles.infoValue}>{deck.metadata.category}</span>\n          </div>\n        )}\n\n        {deck.metadata.difficulty && (\n          <div className={styles.infoRow}>\n            <span className={styles.infoLabel}>Difficulty:</span>\n            <span className={styles.infoValue}>\n              {deck.metadata.difficulty.charAt(0).toUpperCase() +\n                deck.metadata.difficulty.slice(1).replace('_', ' - ')}\n            </span>\n          </div>\n        )}\n\n        {deck.metadata.tags && deck.metadata.tags.length > 0 && (\n          <div className={styles.infoRow}>\n            <span className={styles.infoLabel}>Tags:</span>\n            <div className={styles.tags}>\n              {deck.metadata.tags.map((tag, index) => (\n                <span key={index} className={styles.tag}>\n                  {tag}\n                </span>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {deck.metadata.available_sides && (\n          <div className={styles.infoRow}>\n            <span className={styles.infoLabel}>Available Sides:</span>\n            <span className={styles.infoValue}>{deck.metadata.available_sides} sides per card</span>\n          </div>\n        )}\n\n        {deck.metadata.side_labels && (\n          <div className={styles.infoRow}>\n            <span className={styles.infoLabel}>Side Labels:</span>\n            <div className={styles.sideLabels}>\n              {Object.entries(deck.metadata.side_labels).map(([side, label]) => (\n                <div key={side} className={styles.sideLabel}>\n                  <span className={styles.sideName}>{side.replace('_', ' ').toUpperCase()}:</span>\n                  <span className={styles.sideValue}>{label}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {deck.metadata.version && (\n          <div className={styles.infoRow}>\n            <span className={styles.infoLabel}>Version:</span>\n            <span className={styles.infoValue}>{deck.metadata.version}</span>\n          </div>\n        )}\n\n        {deck.metadata.last_updated && (\n          <div className={styles.infoRow}>\n            <span className={styles.infoLabel}>Last Updated:</span>\n            <span className={styles.infoValue}>\n              {new Date(deck.metadata.last_updated).toLocaleDateString()}\n            </span>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default DeckInformation;\n","import { FC } from 'react';\nimport { SectionProps } from '../UnifiedSettings';\nimport { MatchSettings as MatchSettingsType } from '@/components/modes/match/types';\nimport { ClockIcon, DragHandleIcon } from '@/components/icons/StatusIcons';\nimport styles from './MatchSettings.module.css';\n\n// Info Icon Component for tooltips\nconst InfoTooltip: FC<{ text: string }> = ({ text }) => (\n  <span className={styles.infoTooltipWrapper}>\n    <span className={styles.infoIcon}>ℹ️</span>\n    <span className={styles.infoTooltip}>{text}</span>\n  </span>\n);\n\n// Grid size presets\nconst GRID_PRESETS = [\n  { label: 'Small (2×3)', rows: 2, cols: 3, cards: 6 },\n  { label: 'Medium (3×4)', rows: 3, cols: 4, cards: 12 },\n  { label: 'Large (4×4)', rows: 4, cols: 4, cards: 16 },\n  { label: 'Extra Large (4×5)', rows: 4, cols: 5, cards: 20 },\n] as const;\n\nconst MatchSettings: FC<SectionProps> = ({ settings, onChange, deck }) => {\n  const matchSettings = settings as MatchSettingsType;\n\n  // Get available sides from the deck based on available_sides count\n  const availableSidesCount = deck?.metadata?.available_sides || 2;\n  const availableSides: string[] = [];\n  for (let i = 0; i < Math.min(availableSidesCount, 6); i++) {\n    const sideKeys = ['side_a', 'side_b', 'side_c', 'side_d', 'side_e', 'side_f'];\n    availableSides.push(sideKeys[i]);\n  }\n\n  // Helper to get side display name from deck metadata\n  const getSideDisplayName = (side: string): string => {\n    // Use actual side label from deck metadata if available\n    const label = deck?.metadata?.side_labels?.[side as keyof typeof deck.metadata.side_labels];\n    if (label) {\n      // Capitalize first letter\n      return label.charAt(0).toUpperCase() + label.slice(1);\n    }\n\n    // Fallback to generic names if no labels defined\n    const sideMap: Record<string, string> = {\n      side_a: 'Front',\n      side_b: 'Back',\n      side_c: 'Notes',\n      side_d: 'Side D',\n      side_e: 'Side E',\n      side_f: 'Side F',\n    };\n    return sideMap[side] || side.replace('side_', 'Side ').toUpperCase();\n  };\n\n  // Handle grid size change\n  const handleGridSizeChange = (rows: number, cols: number) => {\n    onChange('gridSize', { rows, cols });\n  };\n\n  // Handle match type change\n  const handleMatchTypeChange = (matchType: MatchSettingsType['matchType']) => {\n    onChange('matchType', matchType);\n\n    // Update card sides configuration based on match type\n    const totalCards = matchSettings.gridSize.rows * matchSettings.gridSize.cols;\n    const cardsPerSide = Math.floor(totalCards / 2);\n\n    let newCardSides;\n    switch (matchType) {\n      case 'two_way':\n        newCardSides = [\n          { sides: ['side_a'], label: getSideDisplayName('side_a'), count: cardsPerSide },\n          { sides: ['side_b'], label: getSideDisplayName('side_b'), count: cardsPerSide },\n        ];\n        break;\n      case 'three_way':\n        const cardsPerSideThree = Math.floor(totalCards / 3);\n        newCardSides = [\n          { sides: ['side_a'], label: getSideDisplayName('side_a'), count: cardsPerSideThree },\n          { sides: ['side_b'], label: getSideDisplayName('side_b'), count: cardsPerSideThree },\n          { sides: ['side_c'], label: getSideDisplayName('side_c'), count: cardsPerSideThree },\n        ];\n        break;\n      case 'custom':\n        // Keep existing configuration for custom\n        newCardSides = matchSettings.cardSides;\n        break;\n      default:\n        newCardSides = matchSettings.cardSides;\n    }\n\n    onChange('cardSides', newCardSides);\n  };\n\n  return (\n    <div className={styles.container}>\n      <h3 className={styles.title}>\n        <DragHandleIcon size={20} className={styles.titleIcon} />\n        Match Game Settings\n      </h3>\n\n      <div className={styles.settingsGrid}>\n        {/* Grid Size */}\n        <div className={styles.settingSection}>\n          <label className={styles.sectionLabel}>\n            Grid Size\n            <InfoTooltip text=\"Choose how many cards appear in the match grid\" />\n          </label>\n\n          <div className={styles.gridPresets}>\n            {GRID_PRESETS.map((preset) => (\n              <button\n                key={`${preset.rows}x${preset.cols}`}\n                type=\"button\"\n                className={`${styles.gridPresetButton} ${\n                  matchSettings.gridSize.rows === preset.rows &&\n                  matchSettings.gridSize.cols === preset.cols\n                    ? styles.active\n                    : ''\n                }`}\n                onClick={() => handleGridSizeChange(preset.rows, preset.cols)}\n              >\n                <span className={styles.presetLabel}>{preset.label}</span>\n                <span className={styles.presetInfo}>{preset.cards} cards</span>\n              </button>\n            ))}\n          </div>\n\n          {/* Custom grid size */}\n          <div className={styles.customGridSize}>\n            <span className={styles.customLabel}>Custom Size:</span>\n            <div className={styles.gridInputs}>\n              <label className={styles.gridInput}>\n                <span>Rows</span>\n                <input\n                  type=\"number\"\n                  min=\"2\"\n                  max=\"6\"\n                  value={matchSettings.gridSize.rows}\n                  onChange={e => {\n                    const rows = parseInt(e.target.value) || 2;\n                    handleGridSizeChange(rows, matchSettings.gridSize.cols);\n                  }}\n                  className={styles.numberInput}\n                />\n              </label>\n              <span className={styles.gridMultiplier}>×</span>\n              <label className={styles.gridInput}>\n                <span>Cols</span>\n                <input\n                  type=\"number\"\n                  min=\"2\"\n                  max=\"6\"\n                  value={matchSettings.gridSize.cols}\n                  onChange={e => {\n                    const cols = parseInt(e.target.value) || 2;\n                    handleGridSizeChange(matchSettings.gridSize.rows, cols);\n                  }}\n                  className={styles.numberInput}\n                />\n              </label>\n            </div>\n          </div>\n        </div>\n\n        {/* Match Type */}\n        <div className={styles.settingSection}>\n          <label className={styles.sectionLabel}>\n            Match Type\n            <InfoTooltip text=\"How cards should match together\" />\n          </label>\n\n          <div className={styles.matchTypeOptions}>\n            <label className={styles.radioOption}>\n              <input\n                type=\"radio\"\n                name=\"matchType\"\n                value=\"two_way\"\n                checked={matchSettings.matchType === 'two_way'}\n                onChange={() => handleMatchTypeChange('two_way')}\n                className={styles.radioInput}\n              />\n              <div className={styles.radioContent}>\n                <span className={styles.radioLabel}>Two-Way Matching</span>\n                <span className={styles.radioDescription}>\n                  Match {getSideDisplayName('side_a')} ↔ {getSideDisplayName('side_b')}\n                </span>\n              </div>\n            </label>\n\n            <label className={styles.radioOption}>\n              <input\n                type=\"radio\"\n                name=\"matchType\"\n                value=\"three_way\"\n                checked={matchSettings.matchType === 'three_way'}\n                onChange={() => handleMatchTypeChange('three_way')}\n                className={styles.radioInput}\n                disabled={availableSides.length < 3}\n              />\n              <div className={styles.radioContent}>\n                <span className={styles.radioLabel}>Three-Way Matching</span>\n                <span className={styles.radioDescription}>\n                  {availableSides.length < 3\n                    ? 'Requires 3+ sides'\n                    : `Match ${getSideDisplayName('side_a')} ↔ ${getSideDisplayName('side_b')} ↔ ${getSideDisplayName('side_c')}`\n                  }\n                </span>\n              </div>\n            </label>\n\n            <label className={styles.radioOption}>\n              <input\n                type=\"radio\"\n                name=\"matchType\"\n                value=\"custom\"\n                checked={matchSettings.matchType === 'custom'}\n                onChange={() => handleMatchTypeChange('custom')}\n                className={styles.radioInput}\n              />\n              <div className={styles.radioContent}>\n                <span className={styles.radioLabel}>Custom Configuration</span>\n                <span className={styles.radioDescription}>Configure manually below</span>\n              </div>\n            </label>\n          </div>\n        </div>\n\n        {/* Card Sides Configuration (shown for custom or when configured) */}\n        {(matchSettings.matchType === 'custom' || matchSettings.cardSides.length > 0) && (\n          <div className={styles.settingSection}>\n            <label className={styles.sectionLabel}>\n              Card Sides to Display\n              <InfoTooltip text=\"Configure which sides appear and how many cards show each side\" />\n            </label>\n\n            <div className={styles.cardSidesConfig}>\n              {matchSettings.cardSides.map((cardSide, index) => (\n                <div key={index} className={styles.cardSideRow}>\n                  <div className={styles.sideSelection}>\n                    <label className={styles.sideLabel}>\n                      Side to show:\n                      <select\n                        value={cardSide.sides[0] || 'side_a'}\n                        onChange={e => {\n                          const newCardSides = [...matchSettings.cardSides];\n                          newCardSides[index] = {\n                            ...cardSide,\n                            sides: [e.target.value],\n                            label: getSideDisplayName(e.target.value),\n                          };\n                          onChange('cardSides', newCardSides);\n                        }}\n                        className={styles.select}\n                      >\n                        {availableSides.map(side => (\n                          <option key={side} value={side}>\n                            {getSideDisplayName(side)}\n                          </option>\n                        ))}\n                      </select>\n                    </label>\n                  </div>\n\n                  <div className={styles.sideCount}>\n                    <label className={styles.sideLabel}>\n                      Card count:\n                      <input\n                        type=\"number\"\n                        min=\"1\"\n                        max={matchSettings.gridSize.rows * matchSettings.gridSize.cols - 1}\n                        value={cardSide.count}\n                        onChange={e => {\n                          const newCardSides = [...matchSettings.cardSides];\n                          newCardSides[index] = {\n                            ...cardSide,\n                            count: parseInt(e.target.value) || 1,\n                          };\n                          onChange('cardSides', newCardSides);\n                        }}\n                        className={styles.numberInput}\n                      />\n                    </label>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Timer Settings */}\n        <div className={styles.settingSection}>\n          <label className={styles.sectionLabel}>\n            <ClockIcon size={18} className={styles.sectionIcon} />\n            Timer Settings\n          </label>\n\n          <label className={styles.checkboxRow}>\n            <div className={styles.checkboxContainer}>\n              <input\n                type=\"checkbox\"\n                checked={matchSettings.enableTimer === true}\n                onChange={e => onChange('enableTimer', e.target.checked)}\n                className={styles.checkbox}\n              />\n              <span className={styles.checkboxLabel}>Enable timer</span>\n            </div>\n          </label>\n\n          {matchSettings.enableTimer && (\n            <div className={styles.timerOptions}>\n              <label className={styles.radioOption}>\n                <input\n                  type=\"radio\"\n                  name=\"timerMode\"\n                  checked={matchSettings.timerSeconds === 0}\n                  onChange={() => onChange('timerSeconds', 0)}\n                  className={styles.radioInput}\n                />\n                <div className={styles.radioContent}>\n                  <span className={styles.radioLabel}>Count-up Timer</span>\n                  <span className={styles.radioDescription}>Track your completion time</span>\n                </div>\n              </label>\n\n              <label className={styles.radioOption}>\n                <input\n                  type=\"radio\"\n                  name=\"timerMode\"\n                  checked={matchSettings.timerSeconds > 0}\n                  onChange={() => onChange('timerSeconds', 120)}\n                  className={styles.radioInput}\n                />\n                <div className={styles.radioContent}>\n                  <span className={styles.radioLabel}>Countdown Timer</span>\n                  <span className={styles.radioDescription}>Race against time</span>\n                </div>\n              </label>\n\n              {matchSettings.timerSeconds > 0 && (\n                <label className={styles.settingRow}>\n                  <span className={styles.label}>Time limit (seconds)</span>\n                  <input\n                    type=\"number\"\n                    min=\"30\"\n                    max=\"600\"\n                    value={matchSettings.timerSeconds}\n                    onChange={e => {\n                      const value = parseInt(e.target.value) || 120;\n                      onChange('timerSeconds', Math.max(30, Math.min(600, value)));\n                    }}\n                    className={styles.numberInput}\n                  />\n                </label>\n              )}\n            </div>\n          )}\n        </div>\n\n        {/* Additional Options */}\n        <div className={styles.settingSection}>\n          <label className={styles.sectionLabel}>Additional Options</label>\n\n          <label className={styles.checkboxRow}>\n            <div className={styles.checkboxContainer}>\n              <input\n                type=\"checkbox\"\n                checked={matchSettings.includeMastered === true}\n                onChange={e => onChange('includeMastered', e.target.checked)}\n                className={styles.checkbox}\n              />\n              <span className={styles.checkboxLabel}>\n                Include mastered cards\n                <InfoTooltip text=\"Include cards you've already mastered in the game\" />\n              </span>\n            </div>\n          </label>\n\n          <label className={styles.checkboxRow}>\n            <div className={styles.checkboxContainer}>\n              <input\n                type=\"checkbox\"\n                checked={matchSettings.enableAudio === true}\n                onChange={e => onChange('enableAudio', e.target.checked)}\n                className={styles.checkbox}\n              />\n              <span className={styles.checkboxLabel}>\n                Enable sound effects\n                <InfoTooltip text=\"Play sounds for matches and game completion\" />\n              </span>\n            </div>\n          </label>\n        </div>\n      </div>\n\n      {/* Settings Summary */}\n      <div className={styles.settingsSummary}>\n        <h4 className={styles.summaryTitle}>Current Configuration</h4>\n        <div className={styles.summaryGrid}>\n          <div className={styles.summaryItem}>\n            <span className={styles.summaryLabel}>Grid:</span>\n            <span className={styles.summaryValue}>\n              {matchSettings.gridSize.rows}×{matchSettings.gridSize.cols}\n              ({matchSettings.gridSize.rows * matchSettings.gridSize.cols} cards)\n            </span>\n          </div>\n          <div className={styles.summaryItem}>\n            <span className={styles.summaryLabel}>Match Type:</span>\n            <span className={styles.summaryValue}>\n              {matchSettings.matchType === 'two_way' && 'Two-Way'}\n              {matchSettings.matchType === 'three_way' && 'Three-Way'}\n              {matchSettings.matchType === 'custom' && 'Custom'}\n            </span>\n          </div>\n          <div className={styles.summaryItem}>\n            <span className={styles.summaryLabel}>Timer:</span>\n            <span className={styles.summaryValue}>\n              {matchSettings.enableTimer\n                ? (matchSettings.timerSeconds === 0 ? 'Count-up' : `${matchSettings.timerSeconds}s countdown`)\n                : 'Disabled'\n              }\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MatchSettings;","import { FC } from 'react';\nimport { SectionProps } from '../UnifiedSettings';\nimport { ReadModeSettings, SideId } from '@/types';\nimport styles from './ReadSettings.module.css';\n\nconst ReadSettings: FC<SectionProps> = ({ settings, onChange, deck }) => {\n  const readSettings = settings as ReadModeSettings;\n\n  // Get available sides from deck\n  const availableSides = deck?.reading?.sides || {\n    a: 'Characters',\n    b: 'Pinyin',\n    c: 'English'\n  };\n\n  const sideOptions = Object.entries(availableSides)\n    .filter(([_, label]) => label)\n    .map(([side, label]) => ({\n      value: side as SideId,\n      label: label as string\n    }));\n\n  // Handle translation direction change\n  const handleDirectionChange = (fromOrTo: 'from' | 'to', value: string) => {\n    const newDirection = { ...readSettings.translationDirection };\n    newDirection[fromOrTo] = value as SideId;\n    onChange('translationDirection', newDirection);\n  };\n\n  return (\n    <div className={styles.settingsSection}>\n      <h3 className={styles.sectionTitle}>Read Mode Settings</h3>\n\n      {/* Answer Type */}\n      <div className={styles.settingGroup}>\n        <label className={styles.settingLabel}>\n          Answer Type\n          <span className={styles.settingHint}>How you want to practice translation</span>\n        </label>\n        <div className={styles.radioGroup}>\n          <label className={styles.radioOption}>\n            <input\n              type=\"radio\"\n              name=\"answerType\"\n              value=\"free_text\"\n              checked={readSettings.answerType === 'free_text'}\n              onChange={(e) => onChange('answerType', e.target.value)}\n            />\n            <span>Free Text</span>\n          </label>\n          <label className={styles.radioOption}>\n            <input\n              type=\"radio\"\n              name=\"answerType\"\n              value=\"multiple_choice\"\n              checked={readSettings.answerType === 'multiple_choice'}\n              onChange={(e) => onChange('answerType', e.target.value)}\n            />\n            <span>Multiple Choice</span>\n          </label>\n        </div>\n      </div>\n\n      {/* Check Mode */}\n      <div className={styles.settingGroup}>\n        <label className={styles.settingLabel}>\n          Check Mode\n          <span className={styles.settingHint}>When to check your answers</span>\n        </label>\n        <div className={styles.radioGroup}>\n          <label className={styles.radioOption}>\n            <input\n              type=\"radio\"\n              name=\"checkMode\"\n              value=\"live\"\n              checked={readSettings.checkMode === 'live'}\n              onChange={(e) => onChange('checkMode', e.target.value)}\n            />\n            <span>Live (check as you type)</span>\n          </label>\n          <label className={styles.radioOption}>\n            <input\n              type=\"radio\"\n              name=\"checkMode\"\n              value=\"wait\"\n              checked={readSettings.checkMode === 'wait'}\n              onChange={(e) => onChange('checkMode', e.target.value)}\n            />\n            <span>Wait (check on submit)</span>\n          </label>\n        </div>\n      </div>\n\n      {/* Translation Mode */}\n      <div className={styles.settingGroup}>\n        <label className={styles.settingLabel}>\n          Translation Mode\n          <span className={styles.settingHint}>How to practice translation</span>\n        </label>\n        <div className={styles.radioGroup}>\n          <label className={styles.radioOption}>\n            <input\n              type=\"radio\"\n              name=\"translationMode\"\n              value=\"sentence\"\n              checked={readSettings.translationMode === 'sentence'}\n              onChange={(e) => onChange('translationMode', e.target.value)}\n            />\n            <span>Full Sentence (Recommended)</span>\n          </label>\n          <label className={styles.radioOption}>\n            <input\n              type=\"radio\"\n              name=\"translationMode\"\n              value=\"token\"\n              checked={readSettings.translationMode === 'token'}\n              onChange={(e) => onChange('translationMode', e.target.value)}\n            />\n            <span>Word/Character by Word</span>\n          </label>\n        </div>\n      </div>\n\n      {/* Translation Direction */}\n      <div className={styles.settingGroup}>\n        <label className={styles.settingLabel}>\n          Translation Direction\n          <span className={styles.settingHint}>What to translate from and to</span>\n        </label>\n        <div className={styles.selectGroup}>\n          <div className={styles.selectWrapper}>\n            <label className={styles.selectLabel}>From:</label>\n            <select\n              value={readSettings.translationDirection.from}\n              onChange={(e) => handleDirectionChange('from', e.target.value)}\n              className={styles.select}\n            >\n              {sideOptions.map(option => (\n                <option\n                  key={option.value}\n                  value={option.value}\n                  disabled={option.value === readSettings.translationDirection.to}\n                >\n                  {option.label}\n                </option>\n              ))}\n            </select>\n          </div>\n          <span className={styles.directionArrow}>→</span>\n          <div className={styles.selectWrapper}>\n            <label className={styles.selectLabel}>To:</label>\n            <select\n              value={readSettings.translationDirection.to}\n              onChange={(e) => handleDirectionChange('to', e.target.value)}\n              className={styles.select}\n            >\n              {sideOptions.map(option => (\n                <option\n                  key={option.value}\n                  value={option.value}\n                  disabled={option.value === readSettings.translationDirection.from}\n                >\n                  {option.label}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n      </div>\n\n      {/* Multiple Choice Settings */}\n      {readSettings.answerType === 'multiple_choice' && (\n        <>\n          <div className={styles.settingGroup}>\n            <label className={styles.settingLabel}>\n              Number of Options\n              <span className={styles.settingHint}>How many choices to show</span>\n            </label>\n            <input\n              type=\"number\"\n              min=\"2\"\n              max=\"8\"\n              value={readSettings.optionsCount || 4}\n              onChange={(e) => onChange('optionsCount', parseInt(e.target.value))}\n              className={styles.numberInput}\n            />\n          </div>\n\n          <div className={styles.settingGroup}>\n            <label className={styles.settingLabel}>\n              Difficulty\n              <span className={styles.settingHint}>Controls distractor pool</span>\n            </label>\n            <div className={styles.radioGroup}>\n              <label className={styles.radioOption}>\n                <input\n                  type=\"radio\"\n                  name=\"difficulty\"\n                  value=\"easy\"\n                  checked={readSettings.multipleChoiceDifficulty === 'easy'}\n                  onChange={(e) => onChange('multipleChoiceDifficulty', e.target.value)}\n                />\n                <span>Easy (same line)</span>\n              </label>\n              <label className={styles.radioOption}>\n                <input\n                  type=\"radio\"\n                  name=\"difficulty\"\n                  value=\"medium\"\n                  checked={readSettings.multipleChoiceDifficulty === 'medium'}\n                  onChange={(e) => onChange('multipleChoiceDifficulty', e.target.value)}\n                />\n                <span>Medium (same dialogue)</span>\n              </label>\n              <label className={styles.radioOption}>\n                <input\n                  type=\"radio\"\n                  name=\"difficulty\"\n                  value=\"hard\"\n                  checked={readSettings.multipleChoiceDifficulty === 'hard'}\n                  onChange={(e) => onChange('multipleChoiceDifficulty', e.target.value)}\n                />\n                <span>Hard (any dialogue)</span>\n              </label>\n            </div>\n          </div>\n        </>\n      )}\n\n      {/* Sentence Mode Settings */}\n      {readSettings.translationMode === 'sentence' && (\n        <>\n          <div className={styles.settingGroup}>\n            <label className={styles.settingLabel}>\n              Accuracy Threshold\n              <span className={styles.settingHint}>Minimum similarity % for partial credit</span>\n            </label>\n            <input\n              type=\"number\"\n              min=\"50\"\n              max=\"100\"\n              step=\"5\"\n              value={readSettings.accuracyThreshold || 70}\n              onChange={(e) => onChange('accuracyThreshold', parseInt(e.target.value))}\n              className={styles.numberInput}\n            />\n          </div>\n\n          <div className={styles.settingGroup}>\n            <label className={styles.checkboxLabel}>\n              <input\n                type=\"checkbox\"\n                checked={readSettings.showWordHints !== false}\n                onChange={(e) => onChange('showWordHints', e.target.checked)}\n              />\n              <span>Show Word Hints on Hover/Tap</span>\n            </label>\n          </div>\n        </>\n      )}\n\n      {/* Display Settings */}\n      <div className={styles.settingGroup}>\n        <label className={styles.checkboxLabel}>\n          <input\n            type=\"checkbox\"\n            checked={readSettings.showPinyinDefault}\n            onChange={(e) => onChange('showPinyinDefault', e.target.checked)}\n          />\n          <span>Show Pinyin by Default</span>\n        </label>\n      </div>\n\n      {/* Token Unit */}\n      <div className={styles.settingGroup}>\n        <label className={styles.settingLabel}>\n          Token Unit\n          <span className={styles.settingHint}>How to split text for practice</span>\n        </label>\n        <div className={styles.radioGroup}>\n          <label className={styles.radioOption}>\n            <input\n              type=\"radio\"\n              name=\"unit\"\n              value=\"character\"\n              checked={readSettings.unit === 'character'}\n              onChange={(e) => onChange('unit', e.target.value)}\n            />\n            <span>Character</span>\n          </label>\n          <label className={styles.radioOption}>\n            <input\n              type=\"radio\"\n              name=\"unit\"\n              value=\"word\"\n              checked={readSettings.unit === 'word'}\n              onChange={(e) => onChange('unit', e.target.value)}\n            />\n            <span>Word</span>\n          </label>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ReadSettings;","import { FC, memo, useState, useMemo, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Deck, FlashcardsSettings, LearnModeSettings, ModeSettings, ReadModeSettings } from '@/types';\nimport { MatchSettings as MatchSettingsType } from '@/components/modes/match/types';\nimport { useUnifiedSettings } from '@/hooks/useUnifiedSettings';\nimport styles from './UnifiedSettings.module.css';\n\n// Settings Section Components\nimport QuickPresets from './settings/QuickPresets';\nimport SideConfiguration from './settings/SideConfiguration';\nimport ProgressionSettings from './settings/ProgressionSettings';\nimport LearningSettings from './settings/LearningSettings';\nimport MasterySettings from './settings/MasterySettings';\nimport DeckInformation from './settings/DeckInformation';\nimport MatchSettingsComponent from './settings/MatchSettings';\nimport ReadSettings from './settings/ReadSettings';\n\nexport interface UnifiedSettingsProps {\n  visible: boolean;\n  onClose: () => void;\n  deck: Deck | null;\n  mode: 'flashcards' | 'learn' | 'deck' | 'match' | 'test' | 'read';\n  settings: FlashcardsSettings | LearnModeSettings | ModeSettings | MatchSettingsType | ReadModeSettings;\n  onUpdateSettings: (settings: FlashcardsSettings | LearnModeSettings | ModeSettings | MatchSettingsType | ReadModeSettings) => void;\n  onResetMastery?: () => void; // Only for deck mode\n}\n\nexport interface UnifiedSettingsConfig {\n  mode: 'flashcards' | 'learn' | 'deck' | 'match' | 'test' | 'read';\n  availableSections: SettingsSection[];\n  presets: PresetDefinition[];\n  persistenceKey: string;\n  validationRules: ValidationRule[];\n}\n\nexport interface SettingsSection {\n  id: string;\n  title: string;\n  description?: string;\n  visible: boolean;\n  required?: boolean;\n  component: FC<SectionProps>;\n  order: number;\n}\n\nexport interface SectionProps {\n  settings: any;\n  onChange: (key: string, value: any) => void;\n  deck?: Deck | null;\n  mode?: string;\n  error?: string;\n}\n\nexport interface PresetDefinition {\n  id: string;\n  label: string;\n  shortLabel: string;\n  description: string;\n  tooltip: string;\n  applyToMode: (mode: string, availableSides: string[]) => Partial<ModeSettings>;\n  supportedModes: string[];\n}\n\nexport interface ValidationRule {\n  field: string;\n  validator: (value: any, settings: any) => boolean;\n  errorMessage: string;\n}\n\n// Get configuration for the current mode\nconst getConfigForMode = (mode: string, _deck: Deck | null): UnifiedSettingsConfig => {\n  const sections: Record<string, SettingsSection[]> = {\n    flashcards: [\n      {\n        id: 'quick_presets',\n        title: 'Quick Presets',\n        visible: true,\n        component: QuickPresets,\n        order: 1,\n      },\n      {\n        id: 'front_sides',\n        title: 'Card Front',\n        description: 'Select which sides appear on the front of the card',\n        visible: true,\n        required: true,\n        component: SideConfiguration,\n        order: 2,\n      },\n      {\n        id: 'back_sides',\n        title: 'Card Back',\n        description: 'Select which sides appear on the back of the card',\n        visible: true,\n        required: true,\n        component: SideConfiguration,\n        order: 3,\n      },\n      {\n        id: 'progression',\n        title: 'Card Progression',\n        description: 'Choose how cards are presented during your session',\n        visible: true,\n        component: ProgressionSettings,\n        order: 4,\n      },\n      {\n        id: 'mastered_cards',\n        title: 'Mastered Cards',\n        visible: true,\n        component: MasterySettings,\n        order: 5,\n      },\n    ],\n    learn: [\n      {\n        id: 'quick_presets',\n        title: 'Quick Presets',\n        visible: true,\n        component: QuickPresets,\n        order: 1,\n      },\n      {\n        id: 'question_sides',\n        title: 'Question Sides',\n        description: 'Select which sides to use for questions',\n        visible: true,\n        required: true,\n        component: SideConfiguration,\n        order: 2,\n      },\n      {\n        id: 'answer_sides',\n        title: 'Answer Sides',\n        description: 'Select which sides to use for answers',\n        visible: true,\n        required: true,\n        component: SideConfiguration,\n        order: 3,\n      },\n      {\n        id: 'learning_settings',\n        title: 'Learning Settings',\n        visible: true,\n        component: LearningSettings,\n        order: 4,\n      },\n      {\n        id: 'progression',\n        title: 'Progression Mode',\n        visible: true,\n        component: ProgressionSettings,\n        order: 5,\n      },\n      {\n        id: 'mastery_settings',\n        title: 'Mastery Settings',\n        visible: true,\n        component: MasterySettings,\n        order: 6,\n      },\n    ],\n    deck: [\n      {\n        id: 'deck_information',\n        title: 'Deck Information',\n        visible: true,\n        component: DeckInformation,\n        order: 1,\n      },\n      {\n        id: 'mastery_management',\n        title: 'Mastery Management',\n        visible: true,\n        component: MasterySettings,\n        order: 2,\n      },\n    ],\n    match: [\n      {\n        id: 'quick_presets',\n        title: 'Quick Presets',\n        visible: true,\n        component: QuickPresets,\n        order: 1,\n      },\n      {\n        id: 'match_settings',\n        title: 'Match Game Settings',\n        description: 'Configure grid size, match type, and game options',\n        visible: true,\n        required: true,\n        component: MatchSettingsComponent,\n        order: 2,\n      },\n      {\n        id: 'mastery_settings',\n        title: 'Mastery Settings',\n        description: 'Control which cards appear in the game',\n        visible: true,\n        component: MasterySettings,\n        order: 3,\n      },\n    ],\n    test: [\n      {\n        id: 'quick_presets',\n        title: 'Quick Presets',\n        visible: true,\n        component: QuickPresets,\n        order: 1,\n      },\n      {\n        id: 'test_configuration',\n        title: 'Test Configuration',\n        visible: false, // Future implementation\n        component: QuickPresets, // Placeholder\n        order: 2,\n      },\n    ],\n    read: [\n      {\n        id: 'read_settings',\n        title: 'Read Mode Settings',\n        description: 'Configure translation direction and answer options',\n        visible: true,\n        required: true,\n        component: ReadSettings,\n        order: 1,\n      },\n    ],\n  };\n\n  const validation: Record<string, ValidationRule[]> = {\n    flashcards: [\n      {\n        field: 'frontSides',\n        validator: (value: string[]) => value && value.length > 0,\n        errorMessage: 'At least one front side is required',\n      },\n      {\n        field: 'backSides',\n        validator: (value: string[]) => value && value.length > 0,\n        errorMessage: 'At least one back side is required',\n      },\n    ],\n    learn: [\n      {\n        field: 'questionSides',\n        validator: (value: string[]) => value && value.length > 0,\n        errorMessage: 'At least one question side is required',\n      },\n      {\n        field: 'answerSides',\n        validator: (value: string[]) => value && value.length > 0,\n        errorMessage: 'At least one answer side is required',\n      },\n      {\n        field: 'duplicateSides',\n        validator: (_: any, settings: LearnModeSettings) => {\n          const duplicates = settings.questionSides.filter(s => settings.answerSides.includes(s));\n          return duplicates.length === 0;\n        },\n        errorMessage: 'Same side cannot be both question and answer',\n      },\n      {\n        field: 'cardsPerRound',\n        validator: (value: number) => value >= 5 && value <= 50,\n        errorMessage: 'Cards per round must be between 5 and 50',\n      },\n    ],\n    deck: [],\n    match: [\n      {\n        field: 'gridSize',\n        validator: (value: any) => value && value.rows >= 2 && value.cols >= 2 && (value.rows * value.cols) >= 6,\n        errorMessage: 'Grid must be at least 2x2 with minimum 6 cards',\n      },\n      {\n        field: 'cardSides',\n        validator: (value: any[]) => value && value.length >= 2 && value.every(side => side.count > 0),\n        errorMessage: 'At least 2 card side configurations required with positive counts',\n      },\n      {\n        field: 'timerSeconds',\n        validator: (value: number, settings: any) => !settings.enableTimer || value >= 0,\n        errorMessage: 'Timer seconds must be 0 or positive when timer is enabled',\n      },\n    ],\n    test: [],\n    read: [\n      {\n        field: 'translationDirection',\n        validator: (value: any) => value && value.from && value.to && value.from !== value.to,\n        errorMessage: 'Translation direction must have different from and to sides',\n      },\n      {\n        field: 'optionsCount',\n        validator: (value: any) => !value || value >= 2,\n        errorMessage: 'Options count must be at least 2',\n      },\n    ],\n  };\n\n  return {\n    mode: mode as any,\n    availableSections: sections[mode] || [],\n    presets: [], // Will be populated by the preset system\n    persistenceKey: `unified-settings-${mode}`,\n    validationRules: validation[mode] || [],\n  };\n};\n\nexport const UnifiedSettings: FC<UnifiedSettingsProps> = memo(\n  ({ visible, onClose, deck, mode, settings, onUpdateSettings, onResetMastery }) => {\n    const [isLoading] = useState(false);\n    const [isSaving, setIsSaving] = useState(false);\n    const [errors, setErrors] = useState<Record<string, string>>({});\n\n    const config = useMemo(() => getConfigForMode(mode, deck), [mode, deck]);\n\n    const { localSettings, updateSetting, handleSave, validate } = useUnifiedSettings(\n      settings,\n      config,\n      onUpdateSettings\n    );\n\n    // Clear errors when modal closes\n    useEffect(() => {\n      if (!visible) {\n        setErrors({});\n        setIsSaving(false);\n      }\n    }, [visible]);\n\n    // Handle save with loading state\n    const onSave = async () => {\n      const validationErrors = validate(localSettings);\n      if (Object.keys(validationErrors).length > 0) {\n        setErrors(validationErrors);\n        return;\n      }\n\n      setIsSaving(true);\n      try {\n        await handleSave();\n        onClose();\n      } catch (error) {\n        setErrors({ save: 'Failed to save settings. Please try again.' });\n      } finally {\n        setIsSaving(false);\n      }\n    };\n\n    // Get title based on mode\n    const getModalTitle = () => {\n      const titles = {\n        flashcards: 'Flashcard Settings',\n        learn: 'Learn Mode Settings',\n        deck: 'Deck Settings',\n        match: 'Match Settings',\n        test: 'Test Settings',\n        read: 'Read Settings',\n      };\n      return titles[mode] || 'Settings';\n    };\n\n    if (!deck && mode !== 'deck') return null;\n\n    return (\n      <AnimatePresence>\n        {visible && (\n          <>\n            <motion.div\n              className={styles.overlay}\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n              onClick={onClose}\n            />\n            <motion.div\n              className={styles.modal}\n              initial={{ opacity: 0, scale: 0.95 }}\n              animate={{ opacity: 1, scale: 1 }}\n              exit={{ opacity: 0, scale: 0.95 }}\n              transition={{\n                type: 'spring',\n                stiffness: 300,\n                damping: 30,\n              }}\n            >\n              <header className={styles.header}>\n                <h2 className={styles.title}>{getModalTitle()}</h2>\n                <button\n                  className={styles.closeButton}\n                  onClick={onClose}\n                  aria-label=\"Close settings\"\n                >\n                  ✕\n                </button>\n              </header>\n\n              <div className={styles.content}>\n                {isLoading ? (\n                  <div className={styles.loadingContainer}>\n                    <div className={styles.spinner} data-testid=\"loading-spinner\" />\n                    <span>Loading settings...</span>\n                  </div>\n                ) : (\n                  <>\n                    {/* Render sections based on mode */}\n                    {config.availableSections\n                      .filter(section => section.visible)\n                      .sort((a, b) => a.order - b.order)\n                      .map(section => {\n                        const SectionComponent = section.component;\n                        const sectionError = errors[section.id] || '';\n\n                        // Map section IDs to appropriate settings keys\n                        const sectionSettings = getSectionSettings(section.id, localSettings);\n\n                        return (\n                          <motion.section\n                            key={section.id}\n                            className={styles.section}\n                            initial={{ opacity: 0, x: -20 }}\n                            animate={{ opacity: 1, x: 0 }}\n                            transition={{\n                              delay: section.order * 0.05,\n                              type: 'spring',\n                              stiffness: 100,\n                            }}\n                          >\n                            <SectionComponent\n                              settings={sectionSettings}\n                              onChange={updateSetting}\n                              deck={deck}\n                              mode={mode}\n                              error={sectionError}\n                            />\n                          </motion.section>\n                        );\n                      })}\n\n                    {/* Error display */}\n                    {Object.keys(errors).length > 0 && (\n                      <motion.div\n                        className={styles.errorContainer}\n                        initial={{ opacity: 0, height: 0 }}\n                        animate={{ opacity: 1, height: 'auto' }}\n                        role=\"alert\"\n                      >\n                        {Object.values(errors).map((error, index) => (\n                          <div key={index} className={styles.errorMessage}>\n                            {error}\n                          </div>\n                        ))}\n                      </motion.div>\n                    )}\n                  </>\n                )}\n              </div>\n\n              <footer className={styles.footer}>\n                <button className={styles.cancelButton} onClick={onClose}>\n                  Cancel\n                </button>\n                {mode === 'deck' && onResetMastery ? (\n                  <button className={styles.resetButton} onClick={onResetMastery}>\n                    Reset Mastery\n                  </button>\n                ) : (\n                  <button\n                    className={styles.saveButton}\n                    onClick={onSave}\n                    disabled={isSaving || Object.keys(errors).length > 0}\n                  >\n                    {isSaving ? 'Saving...' : 'Save Settings'}\n                  </button>\n                )}\n              </footer>\n            </motion.div>\n          </>\n        )}\n      </AnimatePresence>\n    );\n  }\n);\n\n// Helper function to map section IDs to settings\nconst getSectionSettings = (sectionId: string, settings: any): any => {\n  // For preset section, return the full settings\n  if (sectionId === 'quick_presets') {\n    return settings;\n  }\n\n  // For side configuration sections, return appropriate settings with section type\n  if (sectionId === 'front_sides' || sectionId === 'back_sides') {\n    return {\n      ...settings,\n      sectionType: sectionId === 'front_sides' ? 'front' : 'back',\n    };\n  }\n\n  if (sectionId === 'question_sides' || sectionId === 'answer_sides') {\n    return {\n      ...settings,\n      sectionType: sectionId === 'question_sides' ? 'question' : 'answer',\n    };\n  }\n\n  // For match settings section, return the full match settings\n  if (sectionId === 'match_settings') {\n    return settings;\n  }\n\n  // For mastery settings, return the full settings\n  if (sectionId === 'mastery_settings') {\n    return settings;\n  }\n\n  // For other sections, return the full settings\n  return settings;\n};\n\nUnifiedSettings.displayName = 'UnifiedSettings';\n\nexport default UnifiedSettings;\n"],"names":["TrophyIcon","className","size","color","jsx","width","height","viewBox","fill","xmlns","children","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","BookOpenIcon","CheckCircleIcon","RefreshIcon","DragHandleIcon","ClockIcon","InformationCircleIcon","getDefaultSettings","mode","defaults","flashcards","frontSides","backSides","progressionMode","includeMastered","enableTimer","timerSeconds","enableAudio","groupSides","learn","questionSides","answerSides","cardsPerRound","randomize","questionTypeMix","schedulingAlgorithm","masteryThreshold","progressiveLearning","progressiveLearningSpacing","questionTypes","adaptiveDifficulty","match","test","read","answerType","checkMode","translationDirection","from","to","optionsCount","showPinyinDefault","multipleChoiceDifficulty","unit","translationMode","accuracyThreshold","showWordHints","useSettingsStore","create","persist","set","get","flashcardsSettings","learnSettings","matchSettings","testSettings","readSettings","presetSelections","getSettingsForMode","deckId","state","updateSettings","settings","applyPreset","presetId","getSettings","key","stored","localStorage","getItem","JSON","parse","saveSettings","setItem","stringify","migrateOldSettings","migrationVersion","oldFlashcardsSettings","parsed","oldLearnSettings","removeItem","error","name","partialize","onRehydrateStorage","UNIVERSAL_PRESETS","id","label","shortLabel","description","tooltip","supportedModes","applyToMode","sides","slice","length","frontCount","Math","min","floor","questions","filter","_","i","answers","getAvailableSidesFromSettings","allSides","Set","QuickPresets","onChange","deck","applicablePresets","useMemo","preset","includes","activePresetId","presetSettings","getAvailableSides","isPresetActive","jsxs","styles","map","index","motion","button","onClick","find","p","availableSides","Object","entries","forEach","value","handlePresetClick","title","initial","opacity","y","animate","transition","delay","whileHover","scale","whileTap","_settings","content","firstCard","side_a","push","side_b","side_c","side_d","side_e","side_f","currentSettings","SideConfiguration","sectionType","getSideLabel","side","metadata","side_labels","charAt","toUpperCase","sideIndex","split","selectedSides","getSectionInfo","currentSides","indexOf","splice","toggleSide","role","ProgressionSettings","currentMode","options","option","type","checked","e","handleChange","target","InfoTooltip","text","LearningSettings","max","numValue","parseInt","isNaN","onBlur","inputMode","pattern","MasterySettings","onResetMastery","isConfirming","setIsConfirming","useState","getMasteredCardsForDeck","shuffleMasteredCardsBack","toggleShuffleMastered","useDeckStore","masteredCount","handleReset","cancelConfirm","DeckInformation","deck_name","category","difficulty","replace","tags","tag","available_sides","version","last_updated","Date","toLocaleDateString","GRID_PRESETS","rows","cols","cards","MatchSettings","availableSidesCount","sideKeys","getSideDisplayName","handleGridSizeChange","handleMatchTypeChange","matchType","totalCards","gridSize","cardsPerSide","newCardSides","count","cardsPerSideThree","cardSides","disabled","cardSide","ReadSettings","reading","a","b","c","sideOptions","handleDirectionChange","fromOrTo","newDirection","Fragment","step","UnifiedSettings","memo","visible","onClose","onUpdateSettings","isLoading","isSaving","setIsSaving","errors","setErrors","config","availableSections","component","order","required","MatchSettingsComponent","presets","persistenceKey","validationRules","field","validator","errorMessage","s","every","getConfigForMode","localSettings","updateSetting","handleSave","validate","initialSettings","setLocalSettings","useEffect","async","loadSettings","useCallback","prev","rule","validationErrors","keys","Error","useUnifiedSettings","AnimatePresence","div","exit","stiffness","damping","section","sort","SectionComponent","sectionError","sectionSettings","getSectionSettings","x","values","save","sectionId","displayName"],"mappings":"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"}