{"version":3,"file":"progressStore-DPupY7fl.js","sources":["../../src/store/progressStore.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { useCardMasteryStore } from './cardMasteryStore';\nimport { useDeckStore } from './deckStore';\n\nexport interface DeckProgress {\n  overall: number;\n  byMode: Record<string, number>;\n  lastStudied?: Date;\n  totalCardsStudied: number;\n  streakDays: number;\n  masteredCards: number;\n  totalCards: number;\n}\n\ninterface ProgressStore {\n  progress: Record<string, DeckProgress>;\n\n  // Actions\n  updateDeckProgress: (\n    deckId: string,\n    mode: string,\n    cardsStudied: number,\n    correctCount: number,\n    totalCards: number\n  ) => void;\n  getDeckProgress: (deckId: string) => DeckProgress;\n  resetDeckProgress: (deckId: string) => void;\n  clearAllProgress: () => void;\n}\n\nconst defaultProgress: DeckProgress = {\n  overall: 0,\n  byMode: {\n    flashcards: 0,\n    learn: 0,\n    match: 0,\n    test: 0,\n  },\n  lastStudied: undefined,\n  totalCardsStudied: 0,\n  streakDays: 0,\n  masteredCards: 0,\n  totalCards: 0,\n};\n\nexport const useProgressStore = create<ProgressStore>()(\n  persist(\n    (set, get) => ({\n      progress: {},\n\n      updateDeckProgress: (\n        deckId: string,\n        _mode: string,\n        cardsStudied: number,\n        _correctCount: number,\n        totalCards: number\n      ) => {\n        set(state => {\n          const existingProgress = state.progress[deckId] || { ...defaultProgress };\n\n          // Get the actual deck to get the correct card count\n          const deckStore = useDeckStore.getState();\n          const deck = deckStore.decks.find(d => d.id === deckId);\n          const actualTotalCards = deck?.content?.length || totalCards;\n\n          // Get mastery data from the card mastery store (ESM import is already at top of file)\n          const cardMasteryStore = useCardMasteryStore.getState();\n          const masteredCards = cardMasteryStore.getMasteredCards(deckId);\n          const masteryPercentage = cardMasteryStore.getDeckMasteryPercentage(deckId, actualTotalCards);\n\n          // For all modes, show mastery percentage instead of session performance\n          // This provides a unified view of progress across all indicators\n          const updatedByMode = {\n            ...existingProgress.byMode,\n            // All modes now show the same mastery percentage\n            flashcards: masteryPercentage,\n            learn: masteryPercentage,\n            match: masteryPercentage,\n            test: masteryPercentage,\n          };\n\n          // Always use mastery percentage as overall progress\n          // This ensures consistency even when no cards are mastered (0%)\n          const overall = masteryPercentage;\n\n          // Check for streak continuation\n          const lastStudied = existingProgress.lastStudied\n            ? new Date(existingProgress.lastStudied)\n            : null;\n          const today = new Date();\n          today.setHours(0, 0, 0, 0);\n\n          let streakDays = existingProgress.streakDays || 0;\n          if (lastStudied) {\n            const lastStudiedDate = new Date(lastStudied);\n            lastStudiedDate.setHours(0, 0, 0, 0);\n\n            const daysDiff = Math.floor(\n              (today.getTime() - lastStudiedDate.getTime()) / (1000 * 60 * 60 * 24)\n            );\n\n            if (daysDiff === 0) {\n              // Same day, keep streak\n              streakDays = existingProgress.streakDays;\n            } else if (daysDiff === 1) {\n              // Next day, increment streak\n              streakDays = existingProgress.streakDays + 1;\n            } else {\n              // Streak broken, restart at 1\n              streakDays = 1;\n            }\n          } else {\n            // First time studying\n            streakDays = 1;\n          }\n\n          return {\n            progress: {\n              ...state.progress,\n              [deckId]: {\n                overall,\n                byMode: updatedByMode,\n                lastStudied: new Date(),\n                totalCardsStudied: existingProgress.totalCardsStudied + cardsStudied,\n                streakDays,\n                masteredCards: masteredCards.length,\n                totalCards: totalCards,\n              },\n            },\n          };\n        });\n      },\n\n      getDeckProgress: (deckId: string) => {\n        const progress = get().progress[deckId];\n\n        // Get the actual deck to get the correct card count\n        const deckStore = useDeckStore.getState();\n        const deck = deckStore.decks.find(d => d.id === deckId);\n        const actualTotalCards = deck?.content?.length || 0;\n\n        // Get mastery data from the card mastery store\n        const cardMasteryStore = useCardMasteryStore.getState();\n        const masteredCards = cardMasteryStore.getMasteredCards(deckId);\n        const masteryPercentage = cardMasteryStore.getDeckMasteryPercentage(deckId, actualTotalCards);\n\n        if (!progress) {\n          return {\n            ...defaultProgress,\n            masteredCards: masteredCards.length,\n            overall: masteryPercentage,\n            // Set all modes to show the mastery percentage\n            byMode: {\n              flashcards: masteryPercentage,\n              learn: masteryPercentage,\n              match: masteryPercentage,\n              test: masteryPercentage,\n            },\n          };\n        }\n\n        // Always use the actual mastery percentage, even if it's 0\n        // This ensures consistency with the deck view\n        const overall = masteryPercentage;\n\n        // Update all modes to show mastery percentage for consistency\n        const unifiedByMode = {\n          flashcards: masteryPercentage,\n          learn: masteryPercentage,\n          match: masteryPercentage,\n          test: masteryPercentage,\n        };\n\n        // Convert stored date string back to Date object\n        return {\n          ...progress,\n          overall,\n          byMode: unifiedByMode,\n          masteredCards: masteredCards.length,\n          lastStudied: progress.lastStudied ? new Date(progress.lastStudied) : undefined,\n        };\n      },\n\n      resetDeckProgress: (deckId: string) => {\n        set(state => {\n          const newProgress = { ...state.progress };\n          delete newProgress[deckId];\n          return { progress: newProgress };\n        });\n      },\n\n      clearAllProgress: () => {\n        set({ progress: {} });\n      },\n    }),\n    {\n      name: 'progress-store',\n      // Ensure dates are properly serialized and deserialized\n      partialize: state => ({\n        progress: Object.entries(state.progress).reduce(\n          (acc, [deckId, progress]) => ({\n            ...acc,\n            [deckId]: {\n              ...progress,\n              lastStudied: progress.lastStudied ? progress.lastStudied.toISOString() : undefined,\n            },\n          }),\n          {}\n        ),\n      }),\n      onRehydrateStorage: () => state => {\n        // Convert ISO strings back to Date objects after rehydration\n        if (state && state.progress) {\n          Object.keys(state.progress).forEach(deckId => {\n            const progress = state.progress[deckId];\n            if (progress.lastStudied && typeof progress.lastStudied === 'string') {\n              progress.lastStudied = new Date(progress.lastStudied);\n            }\n          });\n        }\n      },\n    }\n  )\n);\n"],"names":["defaultProgress","overall","byMode","flashcards","learn","match","test","lastStudied","totalCardsStudied","streakDays","masteredCards","totalCards","useProgressStore","create","persist","set","get","progress","updateDeckProgress","deckId","_mode","cardsStudied","_correctCount","state","existingProgress","deck","useDeckStore","getState","decks","find","d","id","actualTotalCards","content","length","cardMasteryStore","useCardMasteryStore","getMasteredCards","masteryPercentage","getDeckMasteryPercentage","updatedByMode","Date","today","setHours","lastStudiedDate","daysDiff","Math","floor","getTime","getDeckProgress","unifiedByMode","resetDeckProgress","newProgress","clearAllProgress","name","partialize","Object","entries","reduce","acc","toISOString","onRehydrateStorage","keys","forEach"],"mappings":"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"}