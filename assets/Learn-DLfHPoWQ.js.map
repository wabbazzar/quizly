{"version":3,"file":"Learn-DLfHPoWQ.js","sources":["../../src/pages/Learn.tsx"],"sourcesContent":["import { FC, useEffect, useState } from 'react';\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\nimport { useDeckStore } from '@/store/deckStore';\nimport { useProgressStore } from '@/store/progressStore';\nimport { useCardMasteryStore } from '@/store/cardMasteryStore';\nimport LearnContainer from '@/components/modes/learn/LearnContainer';\nimport UnifiedSettings from '@/components/modals/UnifiedSettings';\nimport { useSettingsStore } from '@/store/settingsStore';\nimport { LearnModeSettings, LearnSessionResults } from '@/types';\nimport styles from './Learn.module.css';\n\nconst defaultLearnSettings: LearnModeSettings = {\n  questionTypes: ['multiple_choice', 'free_text'],\n  adaptiveDifficulty: true,\n  cardsPerRound: 10,\n  masteryThreshold: 3,\n  schedulingAlgorithm: 'smart_spaced',\n  aggressiveness: 'balanced',\n  minSpacing: 2,\n  maxSpacing: 8,\n  clusterLimit: 2,\n  progressRatio: 0.3,\n  difficultyWeight: 0.5,\n  questionSides: ['side_a'],\n  answerSides: ['side_b'],\n  frontSides: ['side_a'],\n  backSides: ['side_b'],\n  enableTimer: false,\n  enableAudio: false,\n  randomize: true,\n  progressionMode: 'sequential',\n  questionTypeMix: 'auto',\n  timerSeconds: 30,\n  progressiveLearning: 'spaced',\n  progressiveLearningSpacing: 3,\n};\n\nconst Learn: FC = () => {\n  const { deckId } = useParams<{ deckId: string }>();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { currentDeck, loadDeck, isLoading, error, shuffleMasteredCardsBack } = useDeckStore();\n  const { updateDeckProgress } = useProgressStore();\n  const { updateCardAttempt, getMasteredCards } = useCardMasteryStore();\n  const { updateSettings: updateStoredSettings } = useSettingsStore();\n\n  // Get excluded cards and struggling cards from navigation state\n  const excludeCards = location.state?.excludeCards as number[] | undefined;\n  const strugglingCards = location.state?.strugglingCards as number[] | undefined;\n\n  // Get mastered cards for filtering from the NEW cardMasteryStore (unless shuffle back is enabled)\n  const masteredCards = deckId ? getMasteredCards(deckId) : [];\n\n  // Load settings from localStorage or use defaults\n  const [settings, setSettings] = useState<LearnModeSettings>(() => {\n    const savedSettings = localStorage.getItem('learnModeSettings');\n    if (savedSettings) {\n      try {\n        return { ...defaultLearnSettings, ...JSON.parse(savedSettings) };\n      } catch (e) {\n        console.error('Failed to parse saved settings:', e);\n      }\n    }\n    return defaultLearnSettings;\n  });\n\n  const [showSettings, setShowSettings] = useState(false);\n\n  // Save settings to localStorage whenever they change\n  useEffect(() => {\n    localStorage.setItem('learnModeSettings', JSON.stringify(settings));\n  }, [settings]);\n\n  useEffect(() => {\n    if (deckId) {\n      // Always reload the deck to ensure fresh data after refresh\n      loadDeck(deckId);\n    }\n  }, [deckId, loadDeck]);\n\n  // Prevent body scrolling on mobile\n  useEffect(() => {\n    document.body.classList.add('no-scroll');\n\n    return () => {\n      document.body.classList.remove('no-scroll');\n    };\n  }, []);\n\n  const handleComplete = (results: LearnSessionResults) => {\n    // Update progress store with the session results\n    if (deckId && currentDeck) {\n      const totalCards = currentDeck.content.length;\n      const correctCards = results.correctAnswers;\n\n      // Update card mastery for each card that was answered correctly\n      // Pass the masteryThreshold from settings\n      const masteryThreshold = settings.masteryThreshold || 3;\n\n      if (results.passedCards) {\n        results.passedCards.forEach(cardIndex => {\n          updateCardAttempt(deckId, cardIndex, true, totalCards, masteryThreshold);\n        });\n      }\n\n      if (results.strugglingCards) {\n        results.strugglingCards.forEach(cardIndex => {\n          updateCardAttempt(deckId, cardIndex, false, totalCards, masteryThreshold);\n        });\n      }\n\n      updateDeckProgress(\n        deckId,\n        'learn',\n        results.totalQuestions,\n        correctCards,\n        results.totalQuestions\n      );\n    }\n\n    // Navigate to results page or back to deck\n    navigate(`/deck/${deckId}/results`, { state: { results } });\n  };\n\n  const handleExit = () => {\n    navigate(`/deck/${deckId}`);\n  };\n\n  if (isLoading) {\n    return null; // Let PageLazyBoundary handle loading state\n  }\n\n  if (error || !currentDeck) {\n    return (\n      <div className={styles.errorContainer}>\n        <h2>Unable to Load Deck</h2>\n        <p>{error || 'Deck not found'}</p>\n        <button onClick={() => navigate(`/deck/${deckId}`)} className={styles.backButton}>\n          Back to Deck\n        </button>\n      </div>\n    );\n  }\n\n  // Check if deck content is loaded\n  if (!currentDeck.content || currentDeck.content.length === 0) {\n    return null; // Let PageLazyBoundary handle loading state\n  }\n\n  // Filter deck content based on excludeCards and mastered cards\n  let cardsToExclude = excludeCards || [];\n\n  // If shuffle is NOT enabled, exclude mastered cards\n  if (!shuffleMasteredCardsBack && masteredCards.length > 0) {\n    cardsToExclude = [...new Set([...cardsToExclude, ...masteredCards])];\n  }\n\n  const filteredDeck =\n    cardsToExclude.length > 0\n      ? {\n          ...currentDeck,\n          content: currentDeck.content.filter((_card, index) => !cardsToExclude.includes(index)),\n        }\n      : currentDeck;\n\n  return (\n    <div className={styles.learnPage}>\n      <LearnContainer\n        deck={filteredDeck}\n        settings={settings}\n        strugglingCardIndices={strugglingCards}\n        onComplete={handleComplete}\n        onExit={handleExit}\n        onOpenSettings={() => setShowSettings(true)}\n        deckId={deckId}\n        allDeckCards={currentDeck.content}\n      />\n      <UnifiedSettings\n        visible={showSettings}\n        onClose={() => setShowSettings(false)}\n        deck={currentDeck}\n        mode=\"learn\"\n        settings={settings}\n        onUpdateSettings={newSettings => {\n          const learnSettings = newSettings as LearnModeSettings;\n          setSettings(learnSettings);\n          if (deckId) {\n            updateStoredSettings(deckId, 'learn', learnSettings);\n          }\n        }}\n      />\n    </div>\n  );\n};\n\nexport default Learn;\n"],"names":["defaultLearnSettings","questionTypes","adaptiveDifficulty","cardsPerRound","masteryThreshold","schedulingAlgorithm","aggressiveness","minSpacing","maxSpacing","clusterLimit","progressRatio","difficultyWeight","questionSides","answerSides","frontSides","backSides","enableTimer","enableAudio","randomize","progressionMode","questionTypeMix","timerSeconds","progressiveLearning","progressiveLearningSpacing","Learn","deckId","useParams","navigate","useNavigate","location","useLocation","currentDeck","loadDeck","isLoading","error","shuffleMasteredCardsBack","useDeckStore","updateDeckProgress","useProgressStore","updateCardAttempt","getMasteredCards","useCardMasteryStore","updateSettings","updateStoredSettings","useSettingsStore","excludeCards","state","strugglingCards","masteredCards","settings","setSettings","useState","savedSettings","localStorage","getItem","JSON","parse","e","showSettings","setShowSettings","useEffect","setItem","stringify","document","body","classList","add","remove","jsxs","className","styles","errorContainer","children","jsx","onClick","backButton","content","length","cardsToExclude","Set","filteredDeck","filter","_card","index","includes","learnPage","LearnContainer","deck","strugglingCardIndices","onComplete","results","totalCards","correctCards","correctAnswers","passedCards","forEach","cardIndex","totalQuestions","onExit","onOpenSettings","allDeckCards","UnifiedSettings","visible","onClose","mode","onUpdateSettings","newSettings","learnSettings"],"mappings":"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"}