import{e,p as t}from"./index-K5uqA-3n.js";const r=e()(t((e,t)=>({mastery:{},markCardMastered:(t,r,a)=>{e(e=>{const s=e.mastery[t]||{deckId:t,masteredCards:new Map,totalCards:a,lastUpdated:new Date,masteryThreshold:3},d=new Map(s.masteredCards);return d.set(r,{cardIndex:r,masteredAt:new Date,attemptCount:1,lastSeen:new Date,consecutiveCorrect:s.masteryThreshold||3}),{mastery:{...e.mastery,[t]:{...s,masteredCards:d,totalCards:a,lastUpdated:new Date,masteryThreshold:s.masteryThreshold}}}})},unmarkCardMastered:(t,r)=>{e(e=>{const a=e.mastery[t];if(!a)return e;const s=new Map(a.masteredCards);return s.delete(r),{mastery:{...e.mastery,[t]:{...a,masteredCards:s,lastUpdated:new Date,masteryThreshold:a.masteryThreshold}}}})},getMasteredCards:e=>{const r=t().mastery[e];if(!r)return[];const a=[];return r.masteredCards.forEach((e,t)=>{e.consecutiveCorrect>=(r.masteryThreshold||3)&&a.push(t)}),a},getDeckMasteryPercentage:(e,r)=>{const a=t().mastery[e],s=r??a?.totalCards??0;if(!a||0===s)return 0;let d=0;return a.masteredCards.forEach(e=>{e.consecutiveCorrect>=(a.masteryThreshold||3)&&d++}),Math.round(d/s*100)},resetDeckMastery:t=>{e(e=>{const r={...e.mastery};return delete r[t],{mastery:r}})},updateCardAttempt:(t,r,a,s,d=3)=>{e(e=>{const n=e.mastery[t]||{deckId:t,masteredCards:new Map,totalCards:s,lastUpdated:new Date,masteryThreshold:d},m=new Map(n.masteredCards),o=m.get(r);if(a){const e=o?o.consecutiveCorrect+1:1,t=o?o.attemptCount+1:1;m.set(r,{cardIndex:r,masteredAt:o?.masteredAt||new Date,attemptCount:t,lastSeen:new Date,consecutiveCorrect:e})}else o&&(o.consecutiveCorrect>=d?m.delete(r):m.set(r,{...o,attemptCount:o.attemptCount+1,lastSeen:new Date,consecutiveCorrect:0}));return{mastery:{...e.mastery,[t]:{...n,masteredCards:m,totalCards:s,lastUpdated:new Date,masteryThreshold:d}}}})},isCardMastered:(e,r)=>{const a=t().mastery[e];if(!a)return!1;const s=a.masteredCards.get(r),d=a?.masteryThreshold||3;return!!s&&s.consecutiveCorrect>=d}}),{name:"card-mastery-store",storage:{getItem:e=>{const t=localStorage.getItem(e);if(!t)return null;const r=JSON.parse(t);return r.state&&r.state.mastery&&Object.keys(r.state.mastery).forEach(e=>{const t=r.state.mastery[e];Array.isArray(t.masteredCards)&&(t.masteredCards=new Map(t.masteredCards)),t.lastUpdated&&(t.lastUpdated=new Date(t.lastUpdated)),t.masteredCards.forEach(e=>{e.masteredAt&&(e.masteredAt=new Date(e.masteredAt)),e.lastSeen&&(e.lastSeen=new Date(e.lastSeen))})}),r},setItem:(e,t)=>{const r={...t,state:{...t.state,mastery:Object.keys(t.state.mastery).reduce((e,r)=>{const a=t.state.mastery[r];return e[r]={...a,masteredCards:a.masteredCards?Array.from(a.masteredCards.entries()):[]},e},{})}};localStorage.setItem(e,JSON.stringify(r))},removeItem:e=>{localStorage.removeItem(e)}}}));export{r as u};
