name: Continuous Deployment

on:
  workflow_run:
    workflows: ["Continuous Integration"]
    types:
      - completed
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: "Skip smoke tests"
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: "20"

jobs:
  # Deploy to Staging (Automatic)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: |
      github.actor != 'dependabot[bot]' &&
      ((github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging'))
    environment:
      name: staging
      url: https://staging-quizly.netlify.app
    outputs:
      deployment-url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build for staging
        run: |
          NODE_ENV=staging npm run build
        env:
          VITE_APP_VERSION: ${{ github.sha }}
          VITE_ENVIRONMENT: staging

      # Note: Netlify deployment removed - configure your preferred deployment method
      - name: Deploy to Staging
        id: deploy
        run: |
          echo "Staging deployment skipped - configure deployment method"
          echo "url=https://staging-not-configured.example.com" >> $GITHUB_OUTPUT

      - name: Wait for deployment
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30

      - name: Health Check
        run: |
          echo "Running health check on staging environment..."
          max_attempts=5
          attempt=1

          while [ $attempt -le $max_attempts ]; do
            echo "Health check attempt $attempt/$max_attempts"
            if curl -f --retry 3 --retry-delay 10 "${{ steps.deploy.outputs.url }}" > /dev/null 2>&1; then
              echo "‚úÖ Health check passed"
              break
            fi

            if [ $attempt -eq $max_attempts ]; then
              echo "‚ùå Health check failed after $max_attempts attempts"
              exit 1
            fi

            attempt=$((attempt + 1))
            sleep 15
          done

      - name: Run Smoke Tests
        if: github.event.inputs.skip_tests != 'true'
        run: |
          echo "Running smoke tests against staging environment..."
          npx playwright test --grep "smoke" --reporter=line
        env:
          PLAYWRIGHT_BASE_URL: ${{ steps.deploy.outputs.url }}
          CI: true

      - name: Comment PR with staging URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üöÄ **Staging Deployment Ready!**

              üìñ **Preview URL:** ${{ steps.deploy.outputs.url }}

              ‚úÖ Health checks passed
              ‚úÖ Smoke tests completed

              **Commit:** ${{ github.sha }}
              **Branch:** ${{ github.head_ref }}`
            })

  # Deploy to Production (Manual Approval Required)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: |
      github.actor != 'dependabot[bot]' &&
      ((success() && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'))
    environment:
      name: production
      url: https://quizly.netlify.app
    outputs:
      deployment-url: ${{ steps.deploy.outputs.url }}
      previous-sha: ${{ steps.get-previous.outputs.sha }}
    steps:
      - name: Get previous deployment SHA
        id: get-previous
        run: |
          # Get the previous production deployment SHA for rollback purposes
          PREVIOUS_SHA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/deployments" \
            | jq -r '.[] | select(.environment == "production" and .task == "deploy") | .sha' \
            | head -1)
          echo "sha=${PREVIOUS_SHA:-${{ github.sha }}}" >> $GITHUB_OUTPUT
          echo "Previous production SHA: ${PREVIOUS_SHA:-none}"

      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build for production
        run: |
          NODE_ENV=production npm run build
        env:
          VITE_APP_VERSION: ${{ github.sha }}
          VITE_ENVIRONMENT: production

      # Note: Netlify deployment removed - configure your preferred deployment method
      - name: Deploy to Production
        id: deploy
        run: |
          echo "Production deployment skipped - configure deployment method"
          echo "url=https://production-not-configured.example.com" >> $GITHUB_OUTPUT

      - name: Wait for deployment
        run: |
          echo "Waiting for production deployment to be ready..."
          sleep 45

      - name: Health Check
        run: |
          echo "Running health check on production environment..."
          max_attempts=5
          attempt=1

          while [ $attempt -le $max_attempts ]; do
            echo "Health check attempt $attempt/$max_attempts"
            if curl -f --retry 3 --retry-delay 10 "${{ steps.deploy.outputs.url }}" > /dev/null 2>&1; then
              echo "‚úÖ Production health check passed"
              break
            fi

            if [ $attempt -eq $max_attempts ]; then
              echo "‚ùå Production health check failed after $max_attempts attempts"
              # Trigger rollback
              echo "ROLLBACK_REQUIRED=true" >> $GITHUB_ENV
              exit 1
            fi

            attempt=$((attempt + 1))
            sleep 20
          done

      - name: Post-deployment Tests
        if: github.event.inputs.skip_tests != 'true'
        run: |
          echo "Running critical tests on production environment..."
          npx playwright test --grep "critical" --reporter=line
        env:
          PLAYWRIGHT_BASE_URL: ${{ steps.deploy.outputs.url }}
          CI: true

      - name: Create deployment record
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              description: 'Production deployment via GitHub Actions',
              auto_merge: false,
              required_contexts: []
            });

            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: '${{ steps.deploy.outputs.url }}',
              description: 'Deployment completed successfully'
            });

      - name: Notify Deployment Success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            console.log('üöÄ Production deployment successful!');

            const commitUrl = `https://github.com/${{ github.repository }}/commit/${{ github.sha }}`;
            const deploymentUrl = '${{ steps.deploy.outputs.url }}';

            console.log(`üìñ Production URL: ${deploymentUrl}`);
            console.log(`üìù Commit: ${commitUrl}`);

  # Rollback Production (Triggered on Failure)
  rollback-production:
    name: Rollback Production
    runs-on: ubuntu-latest
    needs: deploy-production
    if: failure() && needs.deploy-production.outputs.previous-sha != ''
    environment:
      name: production-rollback
    steps:
      - name: Checkout previous version
        uses: actions/checkout@v5
        with:
          ref: ${{ needs.deploy-production.outputs.previous-sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build previous version
        run: |
          NODE_ENV=production npm run build
        env:
          VITE_APP_VERSION: ${{ needs.deploy-production.outputs.previous-sha }}
          VITE_ENVIRONMENT: production

      - name: Deploy rollback to production
        id: rollback
        uses: netlify/actions/deploy@master
        with:
          publish-dir: ./dist
          production-deploy: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Emergency Rollback - ${{ needs.deploy-production.outputs.previous-sha }}"
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_PRODUCTION_SITE_ID }}

      - name: Verify rollback
        run: |
          echo "Verifying rollback deployment..."
          sleep 30

          max_attempts=3
          attempt=1

          while [ $attempt -le $max_attempts ]; do
            echo "Rollback verification attempt $attempt/$max_attempts"
            if curl -f --retry 3 --retry-delay 10 "${{ steps.rollback.outputs.url }}" > /dev/null 2>&1; then
              echo "‚úÖ Rollback verification successful"
              break
            fi

            if [ $attempt -eq $max_attempts ]; then
              echo "‚ùå Rollback verification failed after $max_attempts attempts"
              exit 1
            fi

            attempt=$((attempt + 1))
            sleep 15
          done

      - name: Create rollback issue
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® Production Rollback Executed',
              body: `## üö® Emergency Rollback

              **Rollback Details:**
              - **Rolled back from:** ${{ github.sha }}
              - **Rolled back to:** ${{ needs.deploy-production.outputs.previous-sha }}
              - **Timestamp:** ${new Date().toISOString()}
              - **Trigger:** Production deployment failure

              **Actions Required:**
              1. ‚úÖ Rollback completed successfully
              2. üîç Investigate deployment failure
              3. üõ†Ô∏è Fix issues in failed deployment
              4. ‚úÖ Re-deploy when ready

              **Production Status:** ‚úÖ Restored
              **Production URL:** ${{ steps.rollback.outputs.url }}

              Please investigate the deployment failure and ensure all issues are resolved before the next deployment.`,
              labels: ['production', 'rollback', 'urgent']
            });

            console.log('Created rollback tracking issue:', issue.data.html_url);

      - name: Notify rollback completion
        run: |
          echo "üîÑ Production rollback completed successfully"
          echo "Previous version (${{ needs.deploy-production.outputs.previous-sha }}) has been restored"
          echo "Production URL: ${{ steps.rollback.outputs.url }}"

  # Manual Rollback Workflow
  manual-rollback:
    name: Manual Rollback
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'rollback'
    environment:
      name: production-rollback
    steps:
      - name: Get rollback target
        id: rollback-target
        run: |
          # In a real scenario, this could be passed as input or derived from deployment history
          ROLLBACK_SHA=${{ github.event.inputs.rollback_sha || github.event.before }}
          echo "sha=${ROLLBACK_SHA}" >> $GITHUB_OUTPUT

      - name: Checkout rollback target
        uses: actions/checkout@v5
        with:
          ref: ${{ steps.rollback-target.outputs.sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build rollback version
        run: |
          NODE_ENV=production npm run build
        env:
          VITE_APP_VERSION: ${{ steps.rollback-target.outputs.sha }}
          VITE_ENVIRONMENT: production

      - name: Deploy manual rollback
        uses: netlify/actions/deploy@master
        with:
          publish-dir: ./dist
          production-deploy: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Manual Rollback - ${{ steps.rollback-target.outputs.sha }}"
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_PRODUCTION_SITE_ID }}
