name: PR Preview Deployment

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: "20"

jobs:
  # Build and deploy preview
  deploy-preview:
    name: Deploy PR Preview
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.full_name == github.repository
    environment:
      name: preview-pr-${{ github.event.pull_request.number }}
      url: ${{ steps.deploy.outputs.url }}
    outputs:
      preview-url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build for preview
        run: |
          NODE_ENV=preview npm run build
        env:
          VITE_APP_VERSION: pr-${{ github.event.pull_request.number }}-${{ github.event.pull_request.head.sha }}
          VITE_ENVIRONMENT: preview

      # Note: Netlify deployment removed - configure your preferred deployment method
      # Options: Vercel, Netlify CLI, GitHub Pages, or other static hosting
      - name: Deploy Preview
        id: deploy
        run: |
          echo "Preview deployment skipped - configure deployment method"
          echo "url=https://preview-not-configured.example.com" >> $GITHUB_OUTPUT
          echo "deploy_id=preview-${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT

      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('🔍 PR Preview')
            );

            const body = `🔍 **PR Preview Deployed!**

            📖 **Preview URL:** ${{ steps.deploy.outputs.url }}

            ✅ Build completed successfully
            🔗 **Compare:** [View Changes](https://github.com/${{ github.repository }}/pull/${{ github.event.pull_request.number }}/files)

            **Details:**
            - **Commit:** ${{ github.event.pull_request.head.sha }}
            - **Branch:** ${{ github.event.pull_request.head.ref }}
            - **Environment:** Preview
            - **Deploy ID:** ${{ steps.deploy.outputs.deploy_id }}

            > This preview will be updated automatically when you push new commits to this PR.`;

            if (botComment) {
              await github.rest.issues.updateComment({
                comment_id: botComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }

  # Run preview tests
  test-preview:
    name: Test PR Preview
    runs-on: ubuntu-latest
    needs: deploy-preview
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Install Playwright
        run: npx playwright install chromium --with-deps

      - name: Wait for preview deployment
        run: |
          echo "Waiting for preview deployment to be ready..."
          sleep 30

      - name: Run smoke tests on preview
        run: |
          npx playwright test --grep "smoke" --reporter=line
        env:
          PLAYWRIGHT_BASE_URL: ${{ needs.deploy-preview.outputs.preview-url }}
          CI: true

      - name: Run accessibility tests
        run: |
          npx playwright test --grep "accessibility" --reporter=line
        env:
          PLAYWRIGHT_BASE_URL: ${{ needs.deploy-preview.outputs.preview-url }}
          CI: true
        continue-on-error: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: preview-test-results
          path: |
            playwright-report/
            test-results/

      - name: Comment test results
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            let testStatus = '✅ All tests passed';
            let testDetails = 'All preview tests completed successfully.';

            // Try to read test results if available
            try {
              if (fs.existsSync('test-results')) {
                testStatus = '⚠️ Some tests may have issues';
                testDetails = 'Check the test artifacts for detailed results.';
              }
            } catch (error) {
              console.log('Could not read test results:', error.message);
            }

            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const testComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('🧪 Preview Tests')
            );

            const body = `🧪 **Preview Tests Complete**

            ${testStatus}

            **Test Results:**
            - **Smoke Tests:** ${{ job.status == 'success' && '✅ Passed' || '❌ Failed' }}
            - **Accessibility Tests:** Check artifacts for details
            - **Preview URL:** ${{ needs.deploy-preview.outputs.preview-url }}

            ${testDetails}

            > Tests run against the preview deployment automatically.`;

            if (testComment) {
              await github.rest.issues.updateComment({
                comment_id: testComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }

  # Cleanup on PR close
  cleanup-preview:
    name: Cleanup Preview
    runs-on: ubuntu-latest
    if: github.event.action == 'closed'
    steps:
      - name: Delete preview deployment
        uses: actions/github-script@v7
        with:
          script: |
            console.log('PR closed - preview cleanup would happen here');
            // In a real setup, you might:
            // - Delete the Netlify deployment
            // - Clean up preview databases
            // - Remove preview environment resources

      - name: Comment cleanup
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🧹 **Preview Cleanup**

              The preview deployment for this PR has been cleaned up.

              > Preview deployments are automatically removed when PRs are closed.`
            });
